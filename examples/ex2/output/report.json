{
  "timestamp": "2024-01-18 19:53:19.782376",
  "type": "python",
  "version": "1.0",
  "name": "Python Test Suite",
  "description": "Checks subtests and graphics",
  "status": "COMPLETED",
  "result": "FAILED",
  "resultMessage": "Some or all Tests failed",
  "details": null,
  "duration": 11.135170936584473,
  "executionDurationReference": 0.01684737205505371,
  "executionDurationStudent": 0.015839099884033203,
  "environment": {
    "Python": "3.10.11",
    "Platform": "Windows-10-10.0.19045-SP0",
    "Packages": {
      "pytest": "7.4.3",
      "pluggy": "1.3.0"
    },
    "Plugins": {
      "json-report": "1.5.0",
      "metadata": "3.0.0"
    }
  },
  "properties": null,
  "debug": null,
  "exitcode": "ExitCode.TESTS_FAILED",
  "summary": {
    "total": 3,
    "success": 1,
    "failed": 0,
    "skipped": 1,
    "timedout": 1
  },
  "tests": [
    {
      "type": "variable",
      "name": "Test timeout",
      "description": null,
      "setup": null,
      "teardown": null,
      "status": "COMPLETED",
      "result": "TIMEDOUT",
      "resultMessage": "Tests timedout",
      "details": null,
      "executionDurationReference": 0.0,
      "executionDurationStudent": 0.0,
      "summary": {
        "total": 2,
        "success": 0,
        "failed": 0,
        "skipped": 0,
        "timedout": 2
      },
      "tests": [
        {
          "name": "var1",
          "status": "COMPLETED",
          "result": "TIMEDOUT",
          "resultMessage": "Test timedout",
          "details": null,
          "longrepr": "self = <tests.test_class.CodeabilityPythonTest object at 0x0000022973157610>, request = <FixtureRequest for <Function test_entrypoint[testcases0]>>\nrecord_property = <function record_property.<locals>.append_property at 0x000002297315E200>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x0000022973155390>, testcases = (0, 0)\n\n    def test_entrypoint(self, request, record_property, monkeymodule, testcases):\n        idx_main, idx_sub = testcases\n    \n        report: any = request.config.stash[report_key][\"report\"]\n        testsuite: CodeAbilityTestSuite = request.config.stash[report_key][\"testsuite\"]\n        specification: CodeAbilitySpecification = request.config.stash[report_key][\"specification\"]\n    \n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        if not check_success_dependency(report, main.successDependency):\n            pytest.skip(f\"Dependency {main.successDependency} not satisfied\")\n    \n        dir_reference = specification.testInfo.referenceDirectory\n        dir_student = specification.testInfo.studentDirectory\n    \n        testtype = main.type\n        file = main.file\n        id = main.id if main.id is not None else str(idx_main + 1)\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        #options = sub.options\n        #verificationFunction = sub.verificationFunction\n    \n        ancestors_sub = [sub, main, testsuite.properties]\n        ancestors_main = [main, testsuite.properties]\n    \n        qualification = get_inherited_property(\"qualification\", ancestors_sub, None)\n        relative_tolerance = get_inherited_property(\"relativeTolerance\", ancestors_sub, 0)\n        absolute_tolerance = get_inherited_property(\"absoluteTolerance\", ancestors_sub, 0)\n        allowed_occuranceRange = get_inherited_property(\"allowedOccuranceRange\", ancestors_sub, None)\n        store_graphics_artefacts = get_inherited_property(\"storeGraphicsArtefacts\", ancestors_main, False)\n    \n        #not needed here:\n        #verbosity = get_inherited_property(\"verbosity\", ancestors_sub, None)\n        #competency = get_inherited_property(\"competency\", ancestors_main, None)\n    \n        \"\"\" Get solutions, measure execution time \"\"\"\n        try:\n>           solution_student, exec_time_student = get_solution(monkeymodule, specification, id, main, Solution.student, store_graphics_artefacts)\n\ni:\\PYTHON\\catester\\catester\\tests\\test_class.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmm = <_pytest.monkeypatch.MonkeyPatch object at 0x0000022973155390>\nspecification = CodeAbilitySpecification(testInfo=CodeAbilityTestInfo(studentDirectory='i:\\\\PYTHON\\\\catester\\\\examples\\\\ex2\\\\student',...\\\\output', artefactDirectory='i:\\\\PYTHON\\\\catester\\\\examples\\\\ex2\\\\artefacts', studentTestCounter=2, testVersion='v1'))\nid = '1'\nmain = CodeAbilityTestCollection(qualification=None, relativeTolerance=None, absoluteTolerance=None, allowedOccuranceRange=No...one, successMessage=None, verbosity=None, name='var1', value=1, evalString=None, pattern=None, countRequirement=None)])\nwhere = <Solution.student: 'student'>, store_graphics = False\n\n    def get_solution(mm, specification: CodeAbilitySpecification, id, main: CodeAbilityTestCollection, where: Solution, store_graphics):\n        \"\"\"Calculate solution if not yet exists\"\"\"\n        exec_time = 0\n        if not \"solutions\" in globals():\n            globals()[\"solutions\"] = {}\n        if not id in globals()[\"solutions\"]:\n            globals()[\"solutions\"][id] = {}\n        if not where in globals()[\"solutions\"][id]:\n            test_info = specification.testInfo\n            test_directory = test_info.testDirectory\n            artefact_directory = test_info.artefactDirectory\n            _dir = test_info.studentDirectory if where == Solution.student else test_info.referenceDirectory\n    \n            type = main.type\n            entry_point = main.entryPoint\n            setup_code = get_property_as_list(main.setUpCode)\n            teardown_code = get_property_as_list(main.tearDownCode)\n            setup_code_dependency = main.setUpCodeDependency\n    \n            \"\"\" remember old working directory \"\"\"\n            dir_old = os.getcwd()\n    \n            \"\"\" add test-directory to paths \"\"\"\n            sys.path.append(test_directory)\n    \n            \"\"\" change into solution-directory student | reference \"\"\"\n            os.chdir(_dir)\n    \n            \"\"\" close all open figures \"\"\"\n            plt.close(\"all\")\n    \n            \"\"\" seed the random generator \"\"\"\n            random.seed(1)\n    \n            \"\"\" Override/Disable certain methods \"\"\"\n            #mm.setattr(random, \"seed\", lambda *x: None)\n            #mm.setattr(os, \"getcwd\", lambda: \"xxx\")\n            #mm.setattr(time, \"sleep\", lambda x: None)\n            #mm.setattr(time, \"time\", lambda: 999)\n            mm.setattr(plt, \"show\", lambda *x: None)\n    \n            \"\"\" start solution with empty namespace \"\"\"\n            namespace = {}\n    \n            if setup_code_dependency is not None:\n                \"\"\" start solution with prior solution \"\"\"\n                try:\n                    namespace = globals()[\"solutions\"][setup_code_dependency][where]\n                except Exception as e:\n                    print(f\"Exception: setUpCodeDependency {setup_code_dependency} not found\")\n                    print(e)\n                    raise\n    \n            if entry_point is not None:\n                \"\"\" try execute the solution \"\"\"\n                file = os.path.join(_dir, entry_point)\n                if not os.path.exists(file):\n                    if where == Solution.student:\n                        \"\"\" only raise if student entry point is not found \"\"\"\n                        raise FileNotFoundError(f\"entryPoint {entry_point} not found\")\n                else:\n                    \"\"\" measure execution time \"\"\"\n                    start_time = time.time()\n                    try:\n                        result = execute_file(file, namespace, timeout=2)\n                        if result == None:\n                            print(f\"TimeoutError: execute_file {file} failed\")\n>                           raise TimeoutError()\nE                           TimeoutError\n\ni:\\PYTHON\\catester\\catester\\tests\\test_class.py:137: TimeoutError"
        },
        {
          "name": "var1",
          "status": "COMPLETED",
          "result": "TIMEDOUT",
          "resultMessage": "Test timedout",
          "details": null,
          "longrepr": "self = <tests.test_class.CodeabilityPythonTest object at 0x0000022973157850>, request = <FixtureRequest for <Function test_entrypoint[testcases1]>>\nrecord_property = <function record_property.<locals>.append_property at 0x000002297315E170>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x000002297321F070>, testcases = (0, 1)\n\n    def test_entrypoint(self, request, record_property, monkeymodule, testcases):\n        idx_main, idx_sub = testcases\n    \n        report: any = request.config.stash[report_key][\"report\"]\n        testsuite: CodeAbilityTestSuite = request.config.stash[report_key][\"testsuite\"]\n        specification: CodeAbilitySpecification = request.config.stash[report_key][\"specification\"]\n    \n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        if not check_success_dependency(report, main.successDependency):\n            pytest.skip(f\"Dependency {main.successDependency} not satisfied\")\n    \n        dir_reference = specification.testInfo.referenceDirectory\n        dir_student = specification.testInfo.studentDirectory\n    \n        testtype = main.type\n        file = main.file\n        id = main.id if main.id is not None else str(idx_main + 1)\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        #options = sub.options\n        #verificationFunction = sub.verificationFunction\n    \n        ancestors_sub = [sub, main, testsuite.properties]\n        ancestors_main = [main, testsuite.properties]\n    \n        qualification = get_inherited_property(\"qualification\", ancestors_sub, None)\n        relative_tolerance = get_inherited_property(\"relativeTolerance\", ancestors_sub, 0)\n        absolute_tolerance = get_inherited_property(\"absoluteTolerance\", ancestors_sub, 0)\n        allowed_occuranceRange = get_inherited_property(\"allowedOccuranceRange\", ancestors_sub, None)\n        store_graphics_artefacts = get_inherited_property(\"storeGraphicsArtefacts\", ancestors_main, False)\n    \n        #not needed here:\n        #verbosity = get_inherited_property(\"verbosity\", ancestors_sub, None)\n        #competency = get_inherited_property(\"competency\", ancestors_main, None)\n    \n        \"\"\" Get solutions, measure execution time \"\"\"\n        try:\n>           solution_student, exec_time_student = get_solution(monkeymodule, specification, id, main, Solution.student, store_graphics_artefacts)\n\ni:\\PYTHON\\catester\\catester\\tests\\test_class.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmm = <_pytest.monkeypatch.MonkeyPatch object at 0x000002297321F070>\nspecification = CodeAbilitySpecification(testInfo=CodeAbilityTestInfo(studentDirectory='i:\\\\PYTHON\\\\catester\\\\examples\\\\ex2\\\\student',...\\\\output', artefactDirectory='i:\\\\PYTHON\\\\catester\\\\examples\\\\ex2\\\\artefacts', studentTestCounter=2, testVersion='v1'))\nid = '1'\nmain = CodeAbilityTestCollection(qualification=None, relativeTolerance=None, absoluteTolerance=None, allowedOccuranceRange=No...one, successMessage=None, verbosity=None, name='var1', value=1, evalString=None, pattern=None, countRequirement=None)])\nwhere = <Solution.student: 'student'>, store_graphics = False\n\n    def get_solution(mm, specification: CodeAbilitySpecification, id, main: CodeAbilityTestCollection, where: Solution, store_graphics):\n        \"\"\"Calculate solution if not yet exists\"\"\"\n        exec_time = 0\n        if not \"solutions\" in globals():\n            globals()[\"solutions\"] = {}\n        if not id in globals()[\"solutions\"]:\n            globals()[\"solutions\"][id] = {}\n        if not where in globals()[\"solutions\"][id]:\n            test_info = specification.testInfo\n            test_directory = test_info.testDirectory\n            artefact_directory = test_info.artefactDirectory\n            _dir = test_info.studentDirectory if where == Solution.student else test_info.referenceDirectory\n    \n            type = main.type\n            entry_point = main.entryPoint\n            setup_code = get_property_as_list(main.setUpCode)\n            teardown_code = get_property_as_list(main.tearDownCode)\n            setup_code_dependency = main.setUpCodeDependency\n    \n            \"\"\" remember old working directory \"\"\"\n            dir_old = os.getcwd()\n    \n            \"\"\" add test-directory to paths \"\"\"\n            sys.path.append(test_directory)\n    \n            \"\"\" change into solution-directory student | reference \"\"\"\n            os.chdir(_dir)\n    \n            \"\"\" close all open figures \"\"\"\n            plt.close(\"all\")\n    \n            \"\"\" seed the random generator \"\"\"\n            random.seed(1)\n    \n            \"\"\" Override/Disable certain methods \"\"\"\n            #mm.setattr(random, \"seed\", lambda *x: None)\n            #mm.setattr(os, \"getcwd\", lambda: \"xxx\")\n            #mm.setattr(time, \"sleep\", lambda x: None)\n            #mm.setattr(time, \"time\", lambda: 999)\n            mm.setattr(plt, \"show\", lambda *x: None)\n    \n            \"\"\" start solution with empty namespace \"\"\"\n            namespace = {}\n    \n            if setup_code_dependency is not None:\n                \"\"\" start solution with prior solution \"\"\"\n                try:\n                    namespace = globals()[\"solutions\"][setup_code_dependency][where]\n                except Exception as e:\n                    print(f\"Exception: setUpCodeDependency {setup_code_dependency} not found\")\n                    print(e)\n                    raise\n    \n            if entry_point is not None:\n                \"\"\" try execute the solution \"\"\"\n                file = os.path.join(_dir, entry_point)\n                if not os.path.exists(file):\n                    if where == Solution.student:\n                        \"\"\" only raise if student entry point is not found \"\"\"\n                        raise FileNotFoundError(f\"entryPoint {entry_point} not found\")\n                else:\n                    \"\"\" measure execution time \"\"\"\n                    start_time = time.time()\n                    try:\n                        result = execute_file(file, namespace, timeout=2)\n                        if result == None:\n                            print(f\"TimeoutError: execute_file {file} failed\")\n>                           raise TimeoutError()\nE                           TimeoutError\n\ni:\\PYTHON\\catester\\catester\\tests\\test_class.py:137: TimeoutError"
        }
      ]
    },
    {
      "type": "variable",
      "name": "Test variables",
      "description": null,
      "setup": null,
      "teardown": null,
      "status": "COMPLETED",
      "result": "PASSED",
      "resultMessage": "Test Basic 1 Tests passed",
      "details": null,
      "executionDurationReference": 0.01684737205505371,
      "executionDurationStudent": 0.015839099884033203,
      "summary": {
        "total": 3,
        "success": 3,
        "failed": 0,
        "skipped": 0,
        "timedout": 0
      },
      "tests": [
        {
          "name": "var1",
          "status": "COMPLETED",
          "result": "PASSED",
          "resultMessage": "var1 Test passed",
          "details": null,
          "longrepr": null
        },
        {
          "name": "var2",
          "status": "COMPLETED",
          "result": "PASSED",
          "resultMessage": "var2 Test passed",
          "details": null,
          "longrepr": null
        },
        {
          "name": "var3",
          "status": "COMPLETED",
          "result": "PASSED",
          "resultMessage": "var3 Test passed",
          "details": null,
          "longrepr": null
        }
      ]
    },
    {
      "type": "variable",
      "name": "Test crash",
      "description": null,
      "setup": null,
      "teardown": null,
      "status": "COMPLETED",
      "result": "SKIPPED",
      "resultMessage": "Tests skipped",
      "details": null,
      "executionDurationReference": 0.0,
      "executionDurationStudent": 0.0,
      "summary": {
        "total": 1,
        "success": 0,
        "failed": 0,
        "skipped": 1,
        "timedout": 0
      },
      "tests": [
        {
          "name": "var1",
          "status": "COMPLETED",
          "result": "SKIPPED",
          "resultMessage": "Test skipped",
          "details": null,
          "longrepr": [
            "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
            220,
            "Skipped: Dependency ['0', '1'] not satisfied"
          ]
        }
      ]
    }
  ]
}