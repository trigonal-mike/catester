{
  "timestamp": "2024-01-22 16:25:19.984334",
  "type": "python",
  "version": "1.0",
  "name": "Python Test Suite",
  "description": "Checks subtests and graphics",
  "status": "COMPLETED",
  "result": "FAILED",
  "resultMessage": "Some or all tests failed",
  "details": null,
  "duration": 1.0414495468139648,
  "executionDurationReference": 0.0,
  "executionDurationStudent": 0.0,
  "environment": {
    "Python": "3.10.11",
    "Platform": "Windows-10-10.0.19045-SP0",
    "Packages": {
      "pytest": "7.4.3",
      "pluggy": "1.3.0"
    },
    "Plugins": {
      "json-report": "1.5.0",
      "metadata": "3.0.0"
    }
  },
  "properties": null,
  "debug": null,
  "exitcode": "ExitCode.TESTS_FAILED",
  "summary": {
    "total": 3,
    "success": 1,
    "failed": 1,
    "skipped": 1,
    "timedout": 0
  },
  "tests": [
    {
      "type": "variable",
      "name": "Variables 1",
      "description": null,
      "setup": [
        "var1=1"
      ],
      "teardown": null,
      "status": "COMPLETED",
      "result": "FAILED",
      "resultMessage": null,
      "details": null,
      "executionDurationReference": 0.0,
      "executionDurationStudent": 0.0,
      "summary": {
        "total": 2,
        "success": 1,
        "failed": 1,
        "skipped": 0,
        "timedout": 0
      },
      "tests": [
        {
          "name": "var1",
          "status": "COMPLETED",
          "result": "PASSED",
          "resultMessage": "fbvgdfbvdf",
          "details": null,
          "longrepr": null
        },
        {
          "name": "var2",
          "status": "COMPLETED",
          "result": "FAILED",
          "resultMessage": null,
          "details": null,
          "longrepr": "self = <tests.test_class.CodeabilityPythonTest object at 0x000001DB49607E80>, request = <FixtureRequest for <Function test_entrypoint[testcases1]>>\nrecord_property = <function record_property.<locals>.append_property at 0x000001DB495FE8C0>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x000001DB496041F0>, testcases = (0, 1)\n\n    def test_entrypoint(self, request, record_property, monkeymodule, testcases):\n        idx_main, idx_sub = testcases\n    \n        check_success_dependency(request, idx_main)\n    \n        _report = request.config.stash[report_key]\n        testsuite: CodeAbilityTestSuite = _report[\"testsuite\"]\n        specification: CodeAbilitySpecification = _report[\"specification\"]\n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        dir_reference = specification.testInfo.referenceDirectory\n        dir_student = specification.testInfo.studentDirectory\n    \n        testtype = main.type\n        file = main.file\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        qualification = sub.qualification\n        relative_tolerance = sub.relativeTolerance\n        absolute_tolerance = sub.absoluteTolerance\n        allowed_occuranceRange = sub.allowedOccuranceRange\n    \n        \"\"\" Get solutions, measure execution time \"\"\"\n        try:\n            solution_student, exec_time_student = get_solution(monkeymodule, request, idx_main, Solution.student)\n            record_property(\"exec_time_student\", exec_time_student)\n            solution_reference, exec_time_reference = get_solution(monkeymodule, request, idx_main, Solution.reference)\n            record_property(\"exec_time_reference\", exec_time_reference)\n        except TimeoutError as e:\n            record_property(\"timeout\", True)\n            raise\n    \n        \"\"\" if test is graphics => get saved graphics object as solution \"\"\"\n        if testtype == TypeEnum.graphics:\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\n            TypeEnum.variable,\n            TypeEnum.graphics,\n            TypeEnum.error,\n            TypeEnum.warning,\n            TypeEnum.help,\n        ]:\n            \"\"\" get the student value \"\"\"\n            if name in solution_student:\n                val_student = solution_student[name]\n            else:\n                \"\"\" value not found, try eval \"\"\"\n                try:\n>                   val_student = eval(name, solution_student)\n\ncatester\\tests\\test_class.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>   ???\nE   NameError: name 'var2' is not defined\n\n<string>:1: NameError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_class.CodeabilityPythonTest object at 0x000001DB49607E80>, request = <FixtureRequest for <Function test_entrypoint[testcases1]>>\nrecord_property = <function record_property.<locals>.append_property at 0x000001DB495FE8C0>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x000001DB496041F0>, testcases = (0, 1)\n\n    def test_entrypoint(self, request, record_property, monkeymodule, testcases):\n        idx_main, idx_sub = testcases\n    \n        check_success_dependency(request, idx_main)\n    \n        _report = request.config.stash[report_key]\n        testsuite: CodeAbilityTestSuite = _report[\"testsuite\"]\n        specification: CodeAbilitySpecification = _report[\"specification\"]\n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        dir_reference = specification.testInfo.referenceDirectory\n        dir_student = specification.testInfo.studentDirectory\n    \n        testtype = main.type\n        file = main.file\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        qualification = sub.qualification\n        relative_tolerance = sub.relativeTolerance\n        absolute_tolerance = sub.absoluteTolerance\n        allowed_occuranceRange = sub.allowedOccuranceRange\n    \n        \"\"\" Get solutions, measure execution time \"\"\"\n        try:\n            solution_student, exec_time_student = get_solution(monkeymodule, request, idx_main, Solution.student)\n            record_property(\"exec_time_student\", exec_time_student)\n            solution_reference, exec_time_reference = get_solution(monkeymodule, request, idx_main, Solution.reference)\n            record_property(\"exec_time_reference\", exec_time_reference)\n        except TimeoutError as e:\n            record_property(\"timeout\", True)\n            raise\n    \n        \"\"\" if test is graphics => get saved graphics object as solution \"\"\"\n        if testtype == TypeEnum.graphics:\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\n            TypeEnum.variable,\n            TypeEnum.graphics,\n            TypeEnum.error,\n            TypeEnum.warning,\n            TypeEnum.help,\n        ]:\n            \"\"\" get the student value \"\"\"\n            if name in solution_student:\n                val_student = solution_student[name]\n            else:\n                \"\"\" value not found, try eval \"\"\"\n                try:\n                    val_student = eval(name, solution_student)\n                except Exception as e:\n>                   raise AssertionError(f\"Variable {name} not found in student namespace\")\nE                   AssertionError: Variable var2 not found in student namespace\n\ncatester\\tests\\test_class.py:239: AssertionError"
        }
      ]
    },
    {
      "type": "variable",
      "name": "Variables 2",
      "description": null,
      "setup": null,
      "teardown": null,
      "status": "COMPLETED",
      "result": "SKIPPED",
      "resultMessage": "Tests skipped",
      "details": null,
      "executionDurationReference": 0.0,
      "executionDurationStudent": 0.0,
      "summary": {
        "total": 1,
        "success": 0,
        "failed": 0,
        "skipped": 1,
        "timedout": 0
      },
      "tests": [
        {
          "name": "var1",
          "status": "COMPLETED",
          "result": "SKIPPED",
          "resultMessage": "Test skipped",
          "details": null,
          "longrepr": [
            "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
            178,
            "Skipped: Dependency ['1'] not satisfied"
          ]
        }
      ]
    },
    {
      "type": "variable",
      "name": "Variables 3",
      "description": null,
      "setup": null,
      "teardown": null,
      "status": "COMPLETED",
      "result": "PASSED",
      "resultMessage": null,
      "details": null,
      "executionDurationReference": 0.0,
      "executionDurationStudent": 0.0,
      "summary": {
        "total": 1,
        "success": 1,
        "failed": 0,
        "skipped": 0,
        "timedout": 0
      },
      "tests": [
        {
          "name": "var1",
          "status": "COMPLETED",
          "result": "PASSED",
          "resultMessage": null,
          "details": null,
          "longrepr": null
        }
      ]
    }
  ]
}