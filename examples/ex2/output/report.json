{
  "timestamp": "2024-01-20 16:06:22.161429",
  "type": "python",
  "version": "1.0",
  "name": "Python Test Suite",
  "description": "Checks subtests and graphics",
  "status": "COMPLETED",
  "result": "FAILED",
  "resultMessage": "Some or all Tests failed",
  "details": null,
  "duration": 3.0414693355560303,
  "executionDurationReference": 0.0,
  "executionDurationStudent": 0.0,
  "environment": {
    "Python": "3.10.11",
    "Platform": "Windows-10-10.0.19045-SP0",
    "Packages": {
      "pytest": "7.4.3",
      "pluggy": "1.3.0"
    },
    "Plugins": {
      "json-report": "1.5.0",
      "metadata": "3.0.0"
    }
  },
  "properties": null,
  "debug": null,
  "exitcode": "ExitCode.TESTS_FAILED",
  "summary": {
    "total": 4,
    "success": 0,
    "failed": 1,
    "skipped": 2,
    "timedout": 1
  },
  "tests": [
    {
      "type": "variable",
      "name": "Test timeout",
      "description": null,
      "setup": [
        "a = 1",
        "b = 1"
      ],
      "teardown": [
        "del a"
      ],
      "status": "COMPLETED",
      "result": "TIMEDOUT",
      "resultMessage": "Tests timedout",
      "details": null,
      "executionDurationReference": 0.0,
      "executionDurationStudent": 0.0,
      "summary": {
        "total": 1,
        "success": 0,
        "failed": 0,
        "skipped": 0,
        "timedout": 1
      },
      "tests": [
        {
          "name": "var1",
          "status": "COMPLETED",
          "result": "TIMEDOUT",
          "resultMessage": "Test timedout",
          "details": null,
          "longrepr": "self = <tests.test_class.CodeabilityPythonTest object at 0x000002E4E331A560>, request = <FixtureRequest for <Function test_entrypoint[testcases0]>>\nrecord_property = <function record_property.<locals>.append_property at 0x000002E4D07F4280>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x000002E4E3318C70>, testcases = (0, 0)\n\n    def test_entrypoint(self, request, record_property, monkeymodule, testcases):\n        idx_main, idx_sub = testcases\n    \n        check_success_dependency(request, idx_main)\n    \n        _report = request.config.stash[report_key]\n        testsuite: CodeAbilityTestSuite = _report[\"testsuite\"]\n        specification: CodeAbilitySpecification = _report[\"specification\"]\n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        dir_reference = specification.testInfo.referenceDirectory\n        dir_student = specification.testInfo.studentDirectory\n    \n        testtype = main.type\n        file = main.file\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        qualification = sub.qualification\n        relative_tolerance = sub.relativeTolerance\n        absolute_tolerance = sub.absoluteTolerance\n        allowed_occuranceRange = sub.allowedOccuranceRange\n    \n        \"\"\" Get solutions, measure execution time \"\"\"\n        try:\n>           solution_student, exec_time_student = get_solution(monkeymodule, request, idx_main, Solution.student)\n\ni:\\PYTHON\\catester\\catester\\tests\\test_class.py:211: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmm = <_pytest.monkeypatch.MonkeyPatch object at 0x000002E4E3318C70>, request = <FixtureRequest for <Function test_entrypoint[testcases0]>>, idx_main = 0, where = <Solution.student: 'student'>\n\n    def get_solution(mm, request, idx_main, where: Solution):\n        \"\"\"Calculate solution if not yet exists\"\"\"\n        _report = request.config.stash[report_key]\n        testsuite: CodeAbilityTestSuite = _report[\"testsuite\"]\n        specification: CodeAbilitySpecification = _report[\"specification\"]\n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        id = str(idx_main)\n    \n        exec_time = 0\n        if not \"solutions\" in globals():\n            globals()[\"solutions\"] = {}\n        if not id in globals()[\"solutions\"]:\n            globals()[\"solutions\"][id] = {}\n        if not where in globals()[\"solutions\"][id]:\n            test_info = specification.testInfo\n            test_directory = test_info.testDirectory\n            artefact_directory = test_info.artefactDirectory\n            _dir = test_info.studentDirectory if where == Solution.student else test_info.referenceDirectory\n    \n            type = main.type\n            entry_point = main.entryPoint\n            setup_code = get_property_as_list(main.setUpCode)\n            teardown_code = get_property_as_list(main.tearDownCode)\n            setup_code_dependency = main.setUpCodeDependency\n            store_graphics_artefacts = main.storeGraphicsArtefacts\n            timeout = main.timeout\n    \n            \"\"\" remember old working directory \"\"\"\n            dir_old = os.getcwd()\n    \n            \"\"\" add test-directory to paths \"\"\"\n            sys.path.append(test_directory)\n    \n            \"\"\" change into solution-directory student | reference \"\"\"\n            os.chdir(_dir)\n    \n            \"\"\" close all open figures \"\"\"\n            plt.close(\"all\")\n    \n            \"\"\" seed the random generator \"\"\"\n            random.seed(1)\n    \n            \"\"\" Override/Disable certain methods \"\"\"\n            #mm.setattr(random, \"seed\", lambda *x: None)\n            #mm.setattr(os, \"getcwd\", lambda: \"xxx\")\n            #mm.setattr(time, \"sleep\", lambda x: None)\n            #mm.setattr(time, \"time\", lambda: 999)\n            mm.setattr(plt, \"show\", lambda *x: None)\n    \n            \"\"\" start solution with empty namespace \"\"\"\n            namespace = {}\n    \n            if setup_code_dependency is not None:\n                scd_idx = main_idx_by_dependency(testsuite, setup_code_dependency)\n                ss = str(scd_idx)\n                \"\"\" start solution with prior solution \"\"\"\n                try:\n                    namespace = globals()[\"solutions\"][ss][where]\n                except Exception as e:\n                    print(f\"Exception: setUpCodeDependency {ss} not found\")\n                    print(e)\n                    raise\n    \n            if entry_point is not None:\n                \"\"\" try execute the solution \"\"\"\n                file = os.path.join(_dir, entry_point)\n                if not os.path.exists(file):\n                    if where == Solution.student:\n                        \"\"\" only raise if student entry point is not found \"\"\"\n                        raise FileNotFoundError(f\"entryPoint {entry_point} not found\")\n                else:\n                    \"\"\" measure execution time \"\"\"\n                    start_time = time.time()\n                    try:\n                        result = execute_file(file, namespace, timeout=timeout)\n                        if result is None:\n                            print(f\"TimeoutError: execute_file {file} failed\")\n>                           raise TimeoutError()\nE                           TimeoutError\n\ni:\\PYTHON\\catester\\catester\\tests\\test_class.py:119: TimeoutError"
        }
      ]
    },
    {
      "type": "variable",
      "name": "Test variables 1",
      "description": null,
      "setup": null,
      "teardown": null,
      "status": "COMPLETED",
      "result": "SKIPPED",
      "resultMessage": "Tests skipped",
      "details": null,
      "executionDurationReference": 0.0,
      "executionDurationStudent": 0.0,
      "summary": {
        "total": 2,
        "success": 0,
        "failed": 0,
        "skipped": 2,
        "timedout": 0
      },
      "tests": [
        {
          "name": "var1",
          "status": "COMPLETED",
          "result": "SKIPPED",
          "resultMessage": "Test skipped",
          "details": null,
          "longrepr": [
            "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
            178,
            "Skipped: Dependency [1] not satisfied"
          ]
        },
        {
          "name": "var2",
          "status": "COMPLETED",
          "result": "SKIPPED",
          "resultMessage": "Test skipped",
          "details": null,
          "longrepr": [
            "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
            178,
            "Skipped: Dependency [1] not satisfied"
          ]
        }
      ]
    },
    {
      "type": "variable",
      "name": "Test variables 2",
      "description": null,
      "setup": null,
      "teardown": null,
      "status": "COMPLETED",
      "result": "SKIPPED",
      "resultMessage": "Tests skipped",
      "details": null,
      "executionDurationReference": 0.0,
      "executionDurationStudent": 0.0,
      "summary": {
        "total": 1,
        "success": 0,
        "failed": 0,
        "skipped": 1,
        "timedout": 0
      },
      "tests": [
        {
          "name": "var3",
          "status": "COMPLETED",
          "result": "SKIPPED",
          "resultMessage": "Test skipped",
          "details": null,
          "longrepr": [
            "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
            178,
            "Skipped: Dependency ['xxx', '1'] not satisfied"
          ]
        }
      ]
    },
    {
      "type": "variable",
      "name": "Test crash",
      "description": null,
      "setup": null,
      "teardown": null,
      "status": "COMPLETED",
      "result": "FAILED",
      "resultMessage": null,
      "details": null,
      "executionDurationReference": 0.0,
      "executionDurationStudent": 0.0,
      "summary": {
        "total": 1,
        "success": 0,
        "failed": 1,
        "skipped": 0,
        "timedout": 0
      },
      "tests": [
        {
          "name": "var1",
          "status": "COMPLETED",
          "result": "FAILED",
          "resultMessage": null,
          "details": null,
          "longrepr": "self = <tests.test_class.CodeabilityPythonTest object at 0x000002E4E331AE90>, request = <FixtureRequest for <Function test_entrypoint[testcases4]>>\nrecord_property = <function record_property.<locals>.append_property at 0x000002E4E33BD2D0>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x000002E4E33E5990>, testcases = (3, 0)\n\n    def test_entrypoint(self, request, record_property, monkeymodule, testcases):\n        idx_main, idx_sub = testcases\n    \n        check_success_dependency(request, idx_main)\n    \n        _report = request.config.stash[report_key]\n        testsuite: CodeAbilityTestSuite = _report[\"testsuite\"]\n        specification: CodeAbilitySpecification = _report[\"specification\"]\n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        dir_reference = specification.testInfo.referenceDirectory\n        dir_student = specification.testInfo.studentDirectory\n    \n        testtype = main.type\n        file = main.file\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        qualification = sub.qualification\n        relative_tolerance = sub.relativeTolerance\n        absolute_tolerance = sub.absoluteTolerance\n        allowed_occuranceRange = sub.allowedOccuranceRange\n    \n        \"\"\" Get solutions, measure execution time \"\"\"\n        try:\n>           solution_student, exec_time_student = get_solution(monkeymodule, request, idx_main, Solution.student)\n\ni:\\PYTHON\\catester\\catester\\tests\\test_class.py:211: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ni:\\PYTHON\\catester\\catester\\tests\\test_class.py:116: in get_solution\n    result = execute_file(file, namespace, timeout=timeout)\nI:\\PYTHON\\catester\\.venv\\lib\\site-packages\\stopit\\utils.py:145: in wrapper\n    result = func(*args, **kwargs)\ni:\\PYTHON\\catester\\catester\\tests\\execution.py:18: in execute_file\n    execute_code(file.read(), filename, namespace)\ni:\\PYTHON\\catester\\catester\\tests\\execution.py:9: in execute_code\n    exec(compile(code, filename, \"exec\"), namespace)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    x = []\n    #var1=x[\"xx\"]\n    #gfh\n>   var1=x[1]\nE   IndexError: list index out of range\n\ni:\\PYTHON\\catester\\examples\\ex2\\student\\crash.py:4: IndexError"
        }
      ]
    }
  ]
}