{
  "created": 1704727457.1771388,
  "duration": 2.989380121231079,
  "exitcode": 1,
  "root": "i:\\PYTHON\\catester\\catester",
  "environment": {},
  "summary": {
    "passed": 6,
    "failed": 4,
    "total": 10,
    "collected": 10
  },
  "collectors": [
    {
      "nodeid": "",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "model/__init__.py",
          "type": "Package"
        },
        {
          "nodeid": "tests/__init__.py",
          "type": "Package"
        }
      ]
    },
    {
      "nodeid": "model/__init__.py",
      "outcome": "passed",
      "result": []
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityPythonTest",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases0]",
          "type": "Function",
          "lineno": 159
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases1]",
          "type": "Function",
          "lineno": 159
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases2]",
          "type": "Function",
          "lineno": 159
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases3]",
          "type": "Function",
          "lineno": 159
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases4]",
          "type": "Function",
          "lineno": 159
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases5]",
          "type": "Function",
          "lineno": 159
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases6]",
          "type": "Function",
          "lineno": 159
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases7]",
          "type": "Function",
          "lineno": 159
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases8]",
          "type": "Function",
          "lineno": 159
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases9]",
          "type": "Function",
          "lineno": 159
        }
      ]
    },
    {
      "nodeid": "tests/test_class.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py::CodeabilityPythonTest",
          "type": "Class"
        }
      ]
    },
    {
      "nodeid": "tests/__init__.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py",
          "type": "Module"
        }
      ]
    }
  ],
  "tests": [
    {
      "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases0]",
      "lineno": 159,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases0]",
        "testcases0",
        "CodeabilityPythonTest",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.004898399998637615,
        "outcome": "passed",
        "stdout": "setup_class\nsetup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic 1",
        "main_description": null,
        "sub_name": "var1",
        "testtype": "variable",
        "qualification": "verifyEqual",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "failure_message": null,
        "success_message": null,
        "verbosity": null,
        "store_graphics_artefacts": false,
        "competency": null
      },
      "call": {
        "duration": 1.0138100999974995,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0022614999979850836,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases1]",
      "lineno": 159,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases1]",
        "testcases1",
        "CodeabilityPythonTest",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0027293999992252793,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic 1",
        "main_description": null,
        "sub_name": "var2",
        "testtype": "variable",
        "qualification": "verifyEqual",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "failure_message": null,
        "success_message": null,
        "verbosity": null,
        "store_graphics_artefacts": false,
        "competency": null
      },
      "call": {
        "duration": 0.0014676999999210238,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001870800002507167,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases2]",
      "lineno": 159,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases2]",
        "testcases2",
        "CodeabilityPythonTest",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.002644000000145752,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic 1",
        "main_description": null,
        "sub_name": "var3",
        "testtype": "variable",
        "qualification": "verifyEqual",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "failure_message": null,
        "success_message": null,
        "verbosity": null,
        "store_graphics_artefacts": false,
        "competency": null
      },
      "call": {
        "duration": 0.002354099997319281,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 263,
          "message": "AssertionError: Variable var3 has incorrect value\nassert 43 == 98 \u00b1 0.0e+00\n  comparison failed\n  Obtained: 43\n  Expected: 98 \u00b1 0.0e+00"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 263,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityPythonTest object at 0x000001C369F8C0A0>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x000001C369F8CFA0>\nconfig = {'abs_path_to_yaml': 'i:\\\\PYTHON\\\\catester\\\\examples\\\\ex1', 'specification': CodeAbilitySpecification(testInfo=CodeAbi...ccessMessage=None, verbosity=None, name='var9', value=None, evalString=None, pattern=None, countRequirement=None)])]))}\ntestcases = (0, 2), json_metadata = {'absolute_tolerance': 0, 'allowed_occuranceRange': None, 'competency': None, 'failure_message': None, ...}\n\n    def test_entrypoint(self, monkeymodule, config, testcases, json_metadata):\n        idx_main, idx_sub = testcases\n    \n        testsuite: CodeAbilityTestSuite = config[\"testsuite\"]\n        specification: CodeAbilitySpecification = config[\"specification\"]\n        abs_path_to_yaml: str = config[\"abs_path_to_yaml\"]\n    \n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        ancestors_sub = [sub, main, testsuite.properties]\n        ancestors_main = [main, testsuite.properties]\n    \n        qualification = get_inherited_property(\"qualification\", ancestors_sub, None)\n        relative_tolerance = get_inherited_property(\"relativeTolerance\", ancestors_sub, 0)\n        absolute_tolerance = get_inherited_property(\"absoluteTolerance\", ancestors_sub, 0)\n        allowed_occuranceRange = get_inherited_property(\"allowedOccuranceRange\", ancestors_sub, None)\n        failure_message = get_inherited_property(\"failureMessage\", ancestors_sub, None)\n        success_message = get_inherited_property(\"successMessage\", ancestors_sub, None)\n        verbosity = get_inherited_property(\"verbosity\", ancestors_sub, None)\n    \n        store_graphics_artefacts = get_inherited_property(\"storeGraphicsArtefacts\", ancestors_main, None)\n        competency = get_inherited_property(\"competency\", ancestors_main, None)\n    \n        testtype = main.type\n        file = main.file\n        id = main.id if main.id is not None else str(idx_main + 1)\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        #options = sub.options\n        #verificationFunction = sub.verificationFunction\n        #json_metadata['sub'] = sub\n        json_metadata['main_name'] = main.name\n        json_metadata['main_description'] = main.description\n        json_metadata['sub_name'] = name\n        json_metadata['testtype'] = testtype\n        json_metadata['qualification'] = qualification\n        json_metadata['relative_tolerance'] = relative_tolerance\n        json_metadata['absolute_tolerance'] = absolute_tolerance\n        json_metadata['allowed_occuranceRange'] = allowed_occuranceRange\n        json_metadata['failure_message'] = failure_message\n        json_metadata['success_message'] = success_message\n        json_metadata['verbosity'] = verbosity\n        json_metadata['store_graphics_artefacts'] = store_graphics_artefacts\n        json_metadata['competency'] = competency\n    \n        solution_reference = get_solution(monkeymodule, config, id, main, Solution.reference, store_graphics_artefacts)\n        solution_student = get_solution(monkeymodule, config, id, main, Solution.student, store_graphics_artefacts)\n    \n        # if test is graphics => get saved graphics object as solution\n        if testtype == \"graphics\":\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\"variable\", \"graphics\", \"error\", \"warning\", \"help\"]:\n            # student value\n            if name in solution_student:\n                val_student = solution_student[name]\n            else:\n                # value not found, try eval\n                try:\n                    val_student = eval(name, solution_student)\n                except Exception as e:\n                    raise AssertionError(f\"Variable {name} not found in student namespace\")\n    \n            if qualification == \"verifyEqual\":\n                # reference value\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        pytest.skip(reason=\"Evaluation of 'evalString' not possible\")\n                else:\n                    if name in solution_reference:\n                        val_reference = solution_reference[name]\n                    else:\n                        try:\n                            val_reference = eval(name, solution_reference)\n                        except Exception as e:\n                            raise AssertionError(f\"Variable {name} not found in reference namespace\")\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                assert type_student == type_reference, f\"Variable {name} has incorrect type, expected: {type_reference}, obtained {type_student}\"\n    \n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    \"\"\"attention: pytest.approx() does not support nested data structures\"\"\"\n>                   assert val_student == pytest.approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\nE                   AssertionError: Variable var3 has incorrect value\nE                   assert 43 == 98 \u00b1 0.0e+00\nE                     comparison failed\nE                     Obtained: 43\nE                     Expected: 98 \u00b1 0.0e+00\n\ntests\\test_class.py:263: AssertionError"
      },
      "teardown": {
        "duration": 0.0005913999993936159,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases3]",
      "lineno": 159,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases3]",
        "testcases3",
        "CodeabilityPythonTest",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0006702999999106396,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic 1",
        "main_description": null,
        "sub_name": "var4",
        "testtype": "variable",
        "qualification": "verifyEqual",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "failure_message": null,
        "success_message": null,
        "verbosity": null,
        "store_graphics_artefacts": false,
        "competency": null
      },
      "call": {
        "duration": 0.0005392999992182013,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 253,
          "message": "AssertionError: Variable var4 has incorrect value\nassert 'i:\\\\PYTHON\\\\...\\ex1\\\\student' == 'i:\\\\PYTHON\\\\...x1\\\\reference'\n  - i:\\PYTHON\\catester\\examples\\ex1\\reference\n  ?                                 ^^^^^  ^^\n  + i:\\PYTHON\\catester\\examples\\ex1\\student\n  ?                                 ^^^^  ^"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 253,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityPythonTest object at 0x000001C369F8C130>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x000001C369F8FDC0>\nconfig = {'abs_path_to_yaml': 'i:\\\\PYTHON\\\\catester\\\\examples\\\\ex1', 'specification': CodeAbilitySpecification(testInfo=CodeAbi...ccessMessage=None, verbosity=None, name='var9', value=None, evalString=None, pattern=None, countRequirement=None)])]))}\ntestcases = (0, 3), json_metadata = {'absolute_tolerance': 0, 'allowed_occuranceRange': None, 'competency': None, 'failure_message': None, ...}\n\n    def test_entrypoint(self, monkeymodule, config, testcases, json_metadata):\n        idx_main, idx_sub = testcases\n    \n        testsuite: CodeAbilityTestSuite = config[\"testsuite\"]\n        specification: CodeAbilitySpecification = config[\"specification\"]\n        abs_path_to_yaml: str = config[\"abs_path_to_yaml\"]\n    \n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        ancestors_sub = [sub, main, testsuite.properties]\n        ancestors_main = [main, testsuite.properties]\n    \n        qualification = get_inherited_property(\"qualification\", ancestors_sub, None)\n        relative_tolerance = get_inherited_property(\"relativeTolerance\", ancestors_sub, 0)\n        absolute_tolerance = get_inherited_property(\"absoluteTolerance\", ancestors_sub, 0)\n        allowed_occuranceRange = get_inherited_property(\"allowedOccuranceRange\", ancestors_sub, None)\n        failure_message = get_inherited_property(\"failureMessage\", ancestors_sub, None)\n        success_message = get_inherited_property(\"successMessage\", ancestors_sub, None)\n        verbosity = get_inherited_property(\"verbosity\", ancestors_sub, None)\n    \n        store_graphics_artefacts = get_inherited_property(\"storeGraphicsArtefacts\", ancestors_main, None)\n        competency = get_inherited_property(\"competency\", ancestors_main, None)\n    \n        testtype = main.type\n        file = main.file\n        id = main.id if main.id is not None else str(idx_main + 1)\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        #options = sub.options\n        #verificationFunction = sub.verificationFunction\n        #json_metadata['sub'] = sub\n        json_metadata['main_name'] = main.name\n        json_metadata['main_description'] = main.description\n        json_metadata['sub_name'] = name\n        json_metadata['testtype'] = testtype\n        json_metadata['qualification'] = qualification\n        json_metadata['relative_tolerance'] = relative_tolerance\n        json_metadata['absolute_tolerance'] = absolute_tolerance\n        json_metadata['allowed_occuranceRange'] = allowed_occuranceRange\n        json_metadata['failure_message'] = failure_message\n        json_metadata['success_message'] = success_message\n        json_metadata['verbosity'] = verbosity\n        json_metadata['store_graphics_artefacts'] = store_graphics_artefacts\n        json_metadata['competency'] = competency\n    \n        solution_reference = get_solution(monkeymodule, config, id, main, Solution.reference, store_graphics_artefacts)\n        solution_student = get_solution(monkeymodule, config, id, main, Solution.student, store_graphics_artefacts)\n    \n        # if test is graphics => get saved graphics object as solution\n        if testtype == \"graphics\":\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\"variable\", \"graphics\", \"error\", \"warning\", \"help\"]:\n            # student value\n            if name in solution_student:\n                val_student = solution_student[name]\n            else:\n                # value not found, try eval\n                try:\n                    val_student = eval(name, solution_student)\n                except Exception as e:\n                    raise AssertionError(f\"Variable {name} not found in student namespace\")\n    \n            if qualification == \"verifyEqual\":\n                # reference value\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        pytest.skip(reason=\"Evaluation of 'evalString' not possible\")\n                else:\n                    if name in solution_reference:\n                        val_reference = solution_reference[name]\n                    else:\n                        try:\n                            val_reference = eval(name, solution_reference)\n                        except Exception as e:\n                            raise AssertionError(f\"Variable {name} not found in reference namespace\")\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                assert type_student == type_reference, f\"Variable {name} has incorrect type, expected: {type_reference}, obtained {type_student}\"\n    \n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n>                   assert val_student == val_reference, failure_msg\nE                   AssertionError: Variable var4 has incorrect value\nE                   assert 'i:\\\\PYTHON\\\\...\\ex1\\\\student' == 'i:\\\\PYTHON\\\\...x1\\\\reference'\nE                     - i:\\PYTHON\\catester\\examples\\ex1\\reference\nE                     ?                                 ^^^^^  ^^\nE                     + i:\\PYTHON\\catester\\examples\\ex1\\student\nE                     ?                                 ^^^^  ^\n\ntests\\test_class.py:253: AssertionError"
      },
      "teardown": {
        "duration": 0.0004090000002179295,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases4]",
      "lineno": 159,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases4]",
        "testcases4",
        "CodeabilityPythonTest",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0005663999982061796,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic 1",
        "main_description": null,
        "sub_name": "var5",
        "testtype": "variable",
        "qualification": "verifyEqual",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "failure_message": null,
        "success_message": null,
        "verbosity": null,
        "store_graphics_artefacts": false,
        "competency": null
      },
      "call": {
        "duration": 0.000416300001234049,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 263,
          "message": "AssertionError: Variable var5 has incorrect value\nassert 1704727455.901943 == 1704727454.8877563 \u00b1 0.0e+00\n  comparison failed\n  Obtained: 1704727455.901943\n  Expected: 1704727454.8877563 \u00b1 0.0e+00"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 263,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityPythonTest object at 0x000001C369F8C1C0>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x000001C36A0955D0>\nconfig = {'abs_path_to_yaml': 'i:\\\\PYTHON\\\\catester\\\\examples\\\\ex1', 'specification': CodeAbilitySpecification(testInfo=CodeAbi...ccessMessage=None, verbosity=None, name='var9', value=None, evalString=None, pattern=None, countRequirement=None)])]))}\ntestcases = (0, 4), json_metadata = {'absolute_tolerance': 0, 'allowed_occuranceRange': None, 'competency': None, 'failure_message': None, ...}\n\n    def test_entrypoint(self, monkeymodule, config, testcases, json_metadata):\n        idx_main, idx_sub = testcases\n    \n        testsuite: CodeAbilityTestSuite = config[\"testsuite\"]\n        specification: CodeAbilitySpecification = config[\"specification\"]\n        abs_path_to_yaml: str = config[\"abs_path_to_yaml\"]\n    \n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        ancestors_sub = [sub, main, testsuite.properties]\n        ancestors_main = [main, testsuite.properties]\n    \n        qualification = get_inherited_property(\"qualification\", ancestors_sub, None)\n        relative_tolerance = get_inherited_property(\"relativeTolerance\", ancestors_sub, 0)\n        absolute_tolerance = get_inherited_property(\"absoluteTolerance\", ancestors_sub, 0)\n        allowed_occuranceRange = get_inherited_property(\"allowedOccuranceRange\", ancestors_sub, None)\n        failure_message = get_inherited_property(\"failureMessage\", ancestors_sub, None)\n        success_message = get_inherited_property(\"successMessage\", ancestors_sub, None)\n        verbosity = get_inherited_property(\"verbosity\", ancestors_sub, None)\n    \n        store_graphics_artefacts = get_inherited_property(\"storeGraphicsArtefacts\", ancestors_main, None)\n        competency = get_inherited_property(\"competency\", ancestors_main, None)\n    \n        testtype = main.type\n        file = main.file\n        id = main.id if main.id is not None else str(idx_main + 1)\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        #options = sub.options\n        #verificationFunction = sub.verificationFunction\n        #json_metadata['sub'] = sub\n        json_metadata['main_name'] = main.name\n        json_metadata['main_description'] = main.description\n        json_metadata['sub_name'] = name\n        json_metadata['testtype'] = testtype\n        json_metadata['qualification'] = qualification\n        json_metadata['relative_tolerance'] = relative_tolerance\n        json_metadata['absolute_tolerance'] = absolute_tolerance\n        json_metadata['allowed_occuranceRange'] = allowed_occuranceRange\n        json_metadata['failure_message'] = failure_message\n        json_metadata['success_message'] = success_message\n        json_metadata['verbosity'] = verbosity\n        json_metadata['store_graphics_artefacts'] = store_graphics_artefacts\n        json_metadata['competency'] = competency\n    \n        solution_reference = get_solution(monkeymodule, config, id, main, Solution.reference, store_graphics_artefacts)\n        solution_student = get_solution(monkeymodule, config, id, main, Solution.student, store_graphics_artefacts)\n    \n        # if test is graphics => get saved graphics object as solution\n        if testtype == \"graphics\":\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\"variable\", \"graphics\", \"error\", \"warning\", \"help\"]:\n            # student value\n            if name in solution_student:\n                val_student = solution_student[name]\n            else:\n                # value not found, try eval\n                try:\n                    val_student = eval(name, solution_student)\n                except Exception as e:\n                    raise AssertionError(f\"Variable {name} not found in student namespace\")\n    \n            if qualification == \"verifyEqual\":\n                # reference value\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        pytest.skip(reason=\"Evaluation of 'evalString' not possible\")\n                else:\n                    if name in solution_reference:\n                        val_reference = solution_reference[name]\n                    else:\n                        try:\n                            val_reference = eval(name, solution_reference)\n                        except Exception as e:\n                            raise AssertionError(f\"Variable {name} not found in reference namespace\")\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                assert type_student == type_reference, f\"Variable {name} has incorrect type, expected: {type_reference}, obtained {type_student}\"\n    \n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    \"\"\"attention: pytest.approx() does not support nested data structures\"\"\"\n>                   assert val_student == pytest.approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\nE                   AssertionError: Variable var5 has incorrect value\nE                   assert 1704727455.901943 == 1704727454.8877563 \u00b1 0.0e+00\nE                     comparison failed\nE                     Obtained: 1704727455.901943\nE                     Expected: 1704727454.8877563 \u00b1 0.0e+00\n\ntests\\test_class.py:263: AssertionError"
      },
      "teardown": {
        "duration": 0.0005595000002358574,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases5]",
      "lineno": 159,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases5]",
        "testcases5",
        "CodeabilityPythonTest",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0013245000009192154,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic 1",
        "main_description": null,
        "sub_name": "var6[1]",
        "testtype": "variable",
        "qualification": "verifyEqual",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "failure_message": null,
        "success_message": null,
        "verbosity": null,
        "store_graphics_artefacts": false,
        "competency": null
      },
      "call": {
        "duration": 0.0004918000013276469,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004208000027574599,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases6]",
      "lineno": 159,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases6]",
        "testcases6",
        "CodeabilityPythonTest",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0006647000009252224,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic 1",
        "main_description": null,
        "sub_name": "var7[0][1]",
        "testtype": "variable",
        "qualification": "verifyEqual",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "failure_message": null,
        "success_message": null,
        "verbosity": null,
        "store_graphics_artefacts": false,
        "competency": null
      },
      "call": {
        "duration": 0.000558600000658771,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 249,
          "message": "AssertionError: Variable var7[0][1] has incorrect type, expected: <class 'str'>, obtained <class 'int'>\nassert <class 'int'> == <class 'str'>"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 249,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityPythonTest object at 0x000001C369F8C2E0>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x000001C369F8D4B0>\nconfig = {'abs_path_to_yaml': 'i:\\\\PYTHON\\\\catester\\\\examples\\\\ex1', 'specification': CodeAbilitySpecification(testInfo=CodeAbi...ccessMessage=None, verbosity=None, name='var9', value=None, evalString=None, pattern=None, countRequirement=None)])]))}\ntestcases = (0, 6), json_metadata = {'absolute_tolerance': 0, 'allowed_occuranceRange': None, 'competency': None, 'failure_message': None, ...}\n\n    def test_entrypoint(self, monkeymodule, config, testcases, json_metadata):\n        idx_main, idx_sub = testcases\n    \n        testsuite: CodeAbilityTestSuite = config[\"testsuite\"]\n        specification: CodeAbilitySpecification = config[\"specification\"]\n        abs_path_to_yaml: str = config[\"abs_path_to_yaml\"]\n    \n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        ancestors_sub = [sub, main, testsuite.properties]\n        ancestors_main = [main, testsuite.properties]\n    \n        qualification = get_inherited_property(\"qualification\", ancestors_sub, None)\n        relative_tolerance = get_inherited_property(\"relativeTolerance\", ancestors_sub, 0)\n        absolute_tolerance = get_inherited_property(\"absoluteTolerance\", ancestors_sub, 0)\n        allowed_occuranceRange = get_inherited_property(\"allowedOccuranceRange\", ancestors_sub, None)\n        failure_message = get_inherited_property(\"failureMessage\", ancestors_sub, None)\n        success_message = get_inherited_property(\"successMessage\", ancestors_sub, None)\n        verbosity = get_inherited_property(\"verbosity\", ancestors_sub, None)\n    \n        store_graphics_artefacts = get_inherited_property(\"storeGraphicsArtefacts\", ancestors_main, None)\n        competency = get_inherited_property(\"competency\", ancestors_main, None)\n    \n        testtype = main.type\n        file = main.file\n        id = main.id if main.id is not None else str(idx_main + 1)\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        #options = sub.options\n        #verificationFunction = sub.verificationFunction\n        #json_metadata['sub'] = sub\n        json_metadata['main_name'] = main.name\n        json_metadata['main_description'] = main.description\n        json_metadata['sub_name'] = name\n        json_metadata['testtype'] = testtype\n        json_metadata['qualification'] = qualification\n        json_metadata['relative_tolerance'] = relative_tolerance\n        json_metadata['absolute_tolerance'] = absolute_tolerance\n        json_metadata['allowed_occuranceRange'] = allowed_occuranceRange\n        json_metadata['failure_message'] = failure_message\n        json_metadata['success_message'] = success_message\n        json_metadata['verbosity'] = verbosity\n        json_metadata['store_graphics_artefacts'] = store_graphics_artefacts\n        json_metadata['competency'] = competency\n    \n        solution_reference = get_solution(monkeymodule, config, id, main, Solution.reference, store_graphics_artefacts)\n        solution_student = get_solution(monkeymodule, config, id, main, Solution.student, store_graphics_artefacts)\n    \n        # if test is graphics => get saved graphics object as solution\n        if testtype == \"graphics\":\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\"variable\", \"graphics\", \"error\", \"warning\", \"help\"]:\n            # student value\n            if name in solution_student:\n                val_student = solution_student[name]\n            else:\n                # value not found, try eval\n                try:\n                    val_student = eval(name, solution_student)\n                except Exception as e:\n                    raise AssertionError(f\"Variable {name} not found in student namespace\")\n    \n            if qualification == \"verifyEqual\":\n                # reference value\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        pytest.skip(reason=\"Evaluation of 'evalString' not possible\")\n                else:\n                    if name in solution_reference:\n                        val_reference = solution_reference[name]\n                    else:\n                        try:\n                            val_reference = eval(name, solution_reference)\n                        except Exception as e:\n                            raise AssertionError(f\"Variable {name} not found in reference namespace\")\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n>               assert type_student == type_reference, f\"Variable {name} has incorrect type, expected: {type_reference}, obtained {type_student}\"\nE               AssertionError: Variable var7[0][1] has incorrect type, expected: <class 'str'>, obtained <class 'int'>\nE               assert <class 'int'> == <class 'str'>\n\ntests\\test_class.py:249: AssertionError"
      },
      "teardown": {
        "duration": 0.0005345999998098705,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases7]",
      "lineno": 159,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases7]",
        "testcases7",
        "CodeabilityPythonTest",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0006085000022721943,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic 1",
        "main_description": null,
        "sub_name": "var7[0][2]",
        "testtype": "variable",
        "qualification": "verifyEqual",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "failure_message": null,
        "success_message": null,
        "verbosity": null,
        "store_graphics_artefacts": false,
        "competency": null
      },
      "call": {
        "duration": 0.0003116000007139519,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.00038580000182264484,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases8]",
      "lineno": 159,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases8]",
        "testcases8",
        "CodeabilityPythonTest",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0005596000009973068,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic 1",
        "main_description": null,
        "sub_name": "var8",
        "testtype": "variable",
        "qualification": "verifyEqual",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "failure_message": null,
        "success_message": null,
        "verbosity": null,
        "store_graphics_artefacts": false,
        "competency": null
      },
      "call": {
        "duration": 0.00034159999995608814,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005100999987917021,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityPythonTest::test_entrypoint[testcases9]",
      "lineno": 159,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases9]",
        "testcases9",
        "CodeabilityPythonTest",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0009253999996872153,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic 2",
        "main_description": null,
        "sub_name": "var9",
        "testtype": "variable",
        "qualification": "verifyEqual",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "failure_message": null,
        "success_message": null,
        "verbosity": null,
        "store_graphics_artefacts": false,
        "competency": null
      },
      "call": {
        "duration": 1.0056068000012601,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0032208000011451077,
        "outcome": "passed",
        "stdout": "teardown_method\nteardown\nteardown_class\n"
      }
    }
  ],
  "_duration": 2.989380121231079,
  "_metadata": {
    "Python": "3.10.11",
    "Platform": "Windows-10-10.0.19045-SP0",
    "Packages": {
      "pytest": "7.4.3",
      "pluggy": "1.3.0"
    },
    "Plugins": {
      "json-report": "1.5.0",
      "metadata": "3.0.0"
    },
    "specyamlfile": "i:\\PYTHON\\catester\\examples\\ex1\\specification.yaml",
    "testyamlfile": "i:\\PYTHON\\catester\\examples\\ex1\\test6.yaml"
  },
  "_timestamp": "2024-01-08 16:24:17.177139",
  "_type": "python",
  "_version": "1.0",
  "_name": "Python Test Suite",
  "_status": "COMPLETED",
  "_result": "ExitCode.TESTS_FAILED",
  "_tests": [
    {
      "name": "Test Basic 1",
      "variable": "var1",
      "status": "COMPLETED",
      "result": "PASSED",
      "details": null
    },
    {
      "name": "Test Basic 1",
      "variable": "var2",
      "status": "COMPLETED",
      "result": "PASSED",
      "details": null
    },
    {
      "name": "Test Basic 1",
      "variable": "var3",
      "status": "COMPLETED",
      "result": "FAILED",
      "details": null
    },
    {
      "name": "Test Basic 1",
      "variable": "var4",
      "status": "COMPLETED",
      "result": "FAILED",
      "details": null
    },
    {
      "name": "Test Basic 1",
      "variable": "var5",
      "status": "COMPLETED",
      "result": "FAILED",
      "details": null
    },
    {
      "name": "Test Basic 1",
      "variable": "var6[1]",
      "status": "COMPLETED",
      "result": "PASSED",
      "details": null
    },
    {
      "name": "Test Basic 1",
      "variable": "var7[0][1]",
      "status": "COMPLETED",
      "result": "FAILED",
      "details": null
    },
    {
      "name": "Test Basic 1",
      "variable": "var7[0][2]",
      "status": "COMPLETED",
      "result": "PASSED",
      "details": null
    },
    {
      "name": "Test Basic 1",
      "variable": "var8",
      "status": "COMPLETED",
      "result": "PASSED",
      "details": null
    },
    {
      "name": "Test Basic 2",
      "variable": "var9",
      "status": "COMPLETED",
      "result": "PASSED",
      "details": null
    }
  ]
}