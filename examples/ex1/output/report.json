{
  "timestamp": "2024-01-29 10:49:12.165984",
  "type": "python",
  "version": "1.0",
  "name": "Python Test suite",
  "description": "Checks subtests and graphics",
  "status": "COMPLETED",
  "result": "FAILED",
  "resultMessage": "Some or all tests failed",
  "details": null,
  "duration": 1.7169065475463867,
  "executionDurationReference": 0.22040128707885742,
  "executionDurationStudent": 0.2752871513366699,
  "environment": {
    "Python": "3.10.11",
    "Platform": "Windows-10-10.0.19045-SP0",
    "Packages": {
      "pytest": "7.4.3",
      "pluggy": "1.3.0"
    },
    "Plugins": {
      "metadata": "3.0.0"
    }
  },
  "properties": null,
  "debug": null,
  "exitcode": "ExitCode.TESTS_FAILED",
  "summary": {
    "total": 1,
    "success": 0,
    "failed": 1,
    "skipped": 0,
    "timedout": 0
  },
  "tests": [
    {
      "type": "graphics",
      "name": "graphics",
      "description": null,
      "setup": null,
      "teardown": null,
      "status": "COMPLETED",
      "result": "FAILED",
      "resultMessage": null,
      "details": null,
      "executionDurationReference": 0.22040128707885742,
      "executionDurationStudent": 0.2752871513366699,
      "summary": {
        "total": 4,
        "success": 2,
        "failed": 2,
        "skipped": 0,
        "timedout": 0
      },
      "tests": [
        {
          "name": "figure(1).axes[0].lines[0]._linestyle",
          "status": "COMPLETED",
          "result": "FAILED",
          "resultMessage": null,
          "details": null,
          "longrepr": "self = <tests.test_class.CodeabilityPythonTest object at 0x000001756195B880>, pytestconfig = <_pytest.config.Config object at 0x000001754D0A00A0>\nrecord_property = <function record_property.<locals>.append_property at 0x0000017561974820>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x0000017561959B10>, testcases = (0, 0)\n\n    def test_entrypoint(self, pytestconfig, record_property, monkeymodule, testcases):\n        idx_main, idx_sub = testcases\n    \n        _report = pytestconfig.stash[report_key]\n        report: any = _report[\"report\"]\n        testsuite: CodeAbilityTestSuite = _report[\"testsuite\"]\n        specification: CodeAbilitySpecification = _report[\"specification\"]\n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        \"\"\" check success dependencies, skip if not satisfied \"\"\"\n        success_dependencies = get_property_as_list(main.successDependency)\n        for dependency in success_dependencies:\n            main_idx = main_idx_by_dependency(testsuite, dependency)\n            total = report[\"tests\"][main_idx][\"summary\"][\"total\"]\n            for sub_idx in range(total):\n                result = report[\"tests\"][main_idx][\"tests\"][sub_idx][\"result\"]\n                if result != TestResult.passed:\n                    pytest.skip(f\"Dependency {success_dependencies} not satisfied\")\n    \n        dir_reference = specification.testInfo.referenceDirectory\n        dir_student = specification.testInfo.studentDirectory\n    \n        testtype = main.type\n        file = main.file\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        qualification = sub.qualification\n        relative_tolerance = sub.relativeTolerance\n        absolute_tolerance = sub.absoluteTolerance\n        allowed_occuranceRange = sub.allowedOccuranceRange\n    \n        \"\"\" Get solutions, measure execution time \"\"\"\n        try:\n            solution_student, exec_time_student = get_solution(monkeymodule, pytestconfig, idx_main, Solution.student)\n            record_property(\"exec_time_student\", exec_time_student)\n            solution_reference, exec_time_reference = get_solution(monkeymodule, pytestconfig, idx_main, Solution.reference)\n            record_property(\"exec_time_reference\", exec_time_reference)\n        except TimeoutError as e:\n            record_property(\"timeout\", True)\n            raise\n    \n        \"\"\" if test is graphics => get saved graphics object as solution \"\"\"\n        if testtype == TypeEnum.graphics:\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\n            TypeEnum.variable,\n            TypeEnum.graphics,\n            TypeEnum.error,\n            TypeEnum.warning,\n            TypeEnum.help,\n        ]:\n            \"\"\" get the student value \"\"\"\n            if name in solution_student:\n                val_student = solution_student[name]\n            else:\n                \"\"\" value not found, try eval \"\"\"\n                try:\n                    val_student = eval(name, solution_student)\n                except Exception as e:\n                    raise\n                    #raise AssertionError(f\"Variable {name} not found in student namespace\")\n    \n            if qualification == QualificationEnum.verifyEqual:\n                \"\"\" get the reference value \"\"\"\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        pytest.skip(reason=\"Evaluation of 'evalString' not possible\")\n                else:\n                    if name in solution_reference:\n                        val_reference = solution_reference[name]\n                    else:\n                        try:\n                            val_reference = eval(name, solution_reference)\n                        except Exception as e:\n                            raise AssertionError(f\"Variable {name} not found in reference namespace\")\n    \n                \"\"\" assert variable-type \"\"\"\n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                assert type_student == type_reference, f\"Variable {name} has incorrect type, expected: {type_reference}, obtained {type_student}\"\n    \n                \"\"\" assert variable-value \"\"\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n>                   assert val_student == val_reference, failure_msg\nE                   AssertionError: Variable figure(1).axes[0].lines[0]._linestyle has incorrect value\nE                   assert '-.' == '--'\nE                     - --\nE                     + -.\n\ncatester\\tests\\test_class.py:260: AssertionError"
        },
        {
          "name": "figure(1).axes[0].lines[0].get_linestyle()",
          "status": "COMPLETED",
          "result": "FAILED",
          "resultMessage": null,
          "details": null,
          "longrepr": "self = <tests.test_class.CodeabilityPythonTest object at 0x000001756195B940>, pytestconfig = <_pytest.config.Config object at 0x000001754D0A00A0>\nrecord_property = <function record_property.<locals>.append_property at 0x0000017561974790>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x00000175658C1570>, testcases = (0, 1)\n\n    def test_entrypoint(self, pytestconfig, record_property, monkeymodule, testcases):\n        idx_main, idx_sub = testcases\n    \n        _report = pytestconfig.stash[report_key]\n        report: any = _report[\"report\"]\n        testsuite: CodeAbilityTestSuite = _report[\"testsuite\"]\n        specification: CodeAbilitySpecification = _report[\"specification\"]\n        main: CodeAbilityTestCollection = testsuite.properties.tests[idx_main]\n        sub: CodeAbilityTest = main.tests[idx_sub]\n    \n        \"\"\" check success dependencies, skip if not satisfied \"\"\"\n        success_dependencies = get_property_as_list(main.successDependency)\n        for dependency in success_dependencies:\n            main_idx = main_idx_by_dependency(testsuite, dependency)\n            total = report[\"tests\"][main_idx][\"summary\"][\"total\"]\n            for sub_idx in range(total):\n                result = report[\"tests\"][main_idx][\"tests\"][sub_idx][\"result\"]\n                if result != TestResult.passed:\n                    pytest.skip(f\"Dependency {success_dependencies} not satisfied\")\n    \n        dir_reference = specification.testInfo.referenceDirectory\n        dir_student = specification.testInfo.studentDirectory\n    \n        testtype = main.type\n        file = main.file\n    \n        name = sub.name\n        value = sub.value\n        evalString = sub.evalString\n        pattern = sub.pattern\n        countRequirement = sub.countRequirement\n        qualification = sub.qualification\n        relative_tolerance = sub.relativeTolerance\n        absolute_tolerance = sub.absoluteTolerance\n        allowed_occuranceRange = sub.allowedOccuranceRange\n    \n        \"\"\" Get solutions, measure execution time \"\"\"\n        try:\n            solution_student, exec_time_student = get_solution(monkeymodule, pytestconfig, idx_main, Solution.student)\n            record_property(\"exec_time_student\", exec_time_student)\n            solution_reference, exec_time_reference = get_solution(monkeymodule, pytestconfig, idx_main, Solution.reference)\n            record_property(\"exec_time_reference\", exec_time_reference)\n        except TimeoutError as e:\n            record_property(\"timeout\", True)\n            raise\n    \n        \"\"\" if test is graphics => get saved graphics object as solution \"\"\"\n        if testtype == TypeEnum.graphics:\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\n            TypeEnum.variable,\n            TypeEnum.graphics,\n            TypeEnum.error,\n            TypeEnum.warning,\n            TypeEnum.help,\n        ]:\n            \"\"\" get the student value \"\"\"\n            if name in solution_student:\n                val_student = solution_student[name]\n            else:\n                \"\"\" value not found, try eval \"\"\"\n                try:\n                    val_student = eval(name, solution_student)\n                except Exception as e:\n                    raise\n                    #raise AssertionError(f\"Variable {name} not found in student namespace\")\n    \n            if qualification == QualificationEnum.verifyEqual:\n                \"\"\" get the reference value \"\"\"\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        pytest.skip(reason=\"Evaluation of 'evalString' not possible\")\n                else:\n                    if name in solution_reference:\n                        val_reference = solution_reference[name]\n                    else:\n                        try:\n                            val_reference = eval(name, solution_reference)\n                        except Exception as e:\n                            raise AssertionError(f\"Variable {name} not found in reference namespace\")\n    \n                \"\"\" assert variable-type \"\"\"\n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                assert type_student == type_reference, f\"Variable {name} has incorrect type, expected: {type_reference}, obtained {type_student}\"\n    \n                \"\"\" assert variable-value \"\"\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n>                   assert val_student == val_reference, failure_msg\nE                   AssertionError: Variable figure(1).axes[0].lines[0].get_linestyle() has incorrect value\nE                   assert '-.' == '--'\nE                     - --\nE                     + -.\n\ncatester\\tests\\test_class.py:260: AssertionError"
        },
        {
          "name": "figure(1).axes[0].get_xlabel()",
          "status": "COMPLETED",
          "result": "PASSED",
          "resultMessage": null,
          "details": null,
          "longrepr": null
        },
        {
          "name": "figure(2).axes[0].get_ylabel()",
          "status": "COMPLETED",
          "result": "PASSED",
          "resultMessage": null,
          "details": null,
          "longrepr": null
        }
      ]
    }
  ]
}