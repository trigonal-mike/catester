{
  "created": 1702463450.7826438,
  "duration": 2.559027910232544,
  "exitcode": 1,
  "root": "i:\\PYTHON\\catester\\catester",
  "environment": {},
  "summary": {
    "passed": 2,
    "failed": 3,
    "total": 5,
    "collected": 5
  },
  "collectors": [
    {
      "nodeid": "",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "model/__init__.py",
          "type": "Package"
        },
        {
          "nodeid": "tests/__init__.py",
          "type": "Package"
        }
      ]
    },
    {
      "nodeid": "model/__init__.py",
      "outcome": "passed",
      "result": []
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases0]",
          "type": "Function",
          "lineno": 153
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases1]",
          "type": "Function",
          "lineno": 153
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases2]",
          "type": "Function",
          "lineno": 153
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases3]",
          "type": "Function",
          "lineno": 153
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases4]",
          "type": "Function",
          "lineno": 153
        }
      ]
    },
    {
      "nodeid": "tests/test_class.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite",
          "type": "Class"
        }
      ]
    },
    {
      "nodeid": "tests/__init__.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py",
          "type": "Module"
        }
      ]
    }
  ],
  "tests": [
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases0]",
      "lineno": 153,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases0]",
        "testcases0",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0030997999710962176,
        "outcome": "passed",
        "stdout": "setup_class\nsetup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic",
        "sub_name": "var1",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "qualification": "verifyEqual",
        "testtype": "variable",
        "failure_message": "Some or all tests failed",
        "success_message": "Congratulations! All tests passed"
      },
      "call": {
        "duration": 1.5126077000168152,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0021758999791927636,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases1]",
      "lineno": 153,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases1]",
        "testcases1",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.002852700010407716,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic",
        "sub_name": "var2",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "qualification": "verifyEqual",
        "testtype": "variable",
        "failure_message": "Some or all tests failed",
        "success_message": "Congratulations! All tests passed"
      },
      "call": {
        "duration": 0.0015159000176936388,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001988800009712577,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases2]",
      "lineno": 153,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases2]",
        "testcases2",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0032122000120580196,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic",
        "sub_name": "var3",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "qualification": "verifyEqual",
        "testtype": "variable",
        "failure_message": "Some or all tests failed",
        "success_message": "Congratulations! All tests passed"
      },
      "call": {
        "duration": 0.002458099974319339,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 235,
          "message": "AssertionError: Variable var3 has incorrect value\nassert 10 == 98 \u00b1 0.0e+00\n  comparison failed\n  Obtained: 10\n  Expected: 98 \u00b1 0.0e+00"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 235,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x00000191808B2FE0>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x00000191808B36A0>\nconfig = {'abs_path_to_yaml': 'i:\\\\PYTHON\\\\catester\\\\examples\\\\ex1', 'testsuite': {'description': 'Checks subtests and graphics...ency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}}\ntestcases = (0, 2), json_metadata = {'absolute_tolerance': 0, 'allowed_occuranceRange': None, 'failure_message': 'Some or all tests failed', 'main_name': 'Test Basic', ...}\n\n    def test_entrypoint(self, monkeymodule, config, testcases, json_metadata):\n        idx_main, idx_sub = testcases\n        main = config[\"testsuite\"][\"properties\"][\"tests\"][idx_main]\n        sub = main[\"tests\"][idx_sub]\n        id = main[\"id\"] if main[\"id\"] is not None else str(idx_main + 1)\n    \n        ancestors = [sub, main, config[\"testsuite\"][\"properties\"]]\n        ancestors1 = [sub, main, config[\"testsuite\"]]\n    \n        relative_tolerance = get_inherited_property(\"relativeTolerance\", ancestors, 0)\n        absolute_tolerance = get_inherited_property(\"absoluteTolerance\", ancestors, 0)\n        allowed_occuranceRange = get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = get_inherited_property(\"qualification\", ancestors, None)\n        testtype = get_inherited_property(\"type\", ancestors, None)\n        failure_message = get_inherited_property(\"failureMessage\", ancestors1, None)\n        success_message = get_inherited_property(\"successMessage\", ancestors1, None)\n    \n        file = main[\"file\"]\n    \n        name = sub[\"name\"]\n        value = sub[\"value\"]\n        evalString = sub[\"evalString\"]\n        pattern = sub[\"pattern\"]\n        countRequirement = sub[\"countRequirement\"]\n        options = sub[\"options\"]\n        verificationFunction = sub[\"verificationFunction\"]\n    \n        main_name = main[\"name\"]\n    \n        #json_metadata['sub'] = sub\n        json_metadata['main_name'] = main_name\n        json_metadata['sub_name'] = name\n        json_metadata['relative_tolerance'] = relative_tolerance\n        json_metadata['absolute_tolerance'] = absolute_tolerance\n        json_metadata['allowed_occuranceRange'] = allowed_occuranceRange\n        json_metadata['qualification'] = qualification\n        json_metadata['testtype'] = testtype\n        json_metadata['failure_message'] = failure_message\n        json_metadata['success_message'] = success_message\n    \n        solution_reference = get_solution(monkeymodule, config, id, main, \"reference\")\n        solution_student = get_solution(monkeymodule, config, id, main, \"student\")\n    \n        if testtype == \"graphics\":\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\"variable\", \"graphics\", \"error\", \"warning\", \"help\"]:\n            assert name in solution_student, f\"Variable {name} not found in student namespace\"\n            val_student = solution_student[name]\n            #val_student = solution_student[eval(name, solution_student)]\n    \n            # get reference value\n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        pytest.skip()\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in solution_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = solution_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n    \n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n>                   assert val_student == pytest.approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\nE                   AssertionError: Variable var3 has incorrect value\nE                   assert 10 == 98 \u00b1 0.0e+00\nE                     comparison failed\nE                     Obtained: 10\nE                     Expected: 98 \u00b1 0.0e+00\n\ntests\\test_class.py:235: AssertionError"
      },
      "teardown": {
        "duration": 0.0005366000114008784,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases3]",
      "lineno": 153,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases3]",
        "testcases3",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0006949999951757491,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic",
        "sub_name": "var4",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "qualification": "verifyEqual",
        "testtype": "variable",
        "failure_message": "Some or all tests failed",
        "success_message": "Congratulations! All tests passed"
      },
      "call": {
        "duration": 0.0005735000013373792,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 226,
          "message": "AssertionError: Variable var4 has incorrect value\nassert 'i:\\\\PYTHON\\\\...\\ex1\\\\student' == 'i:\\\\PYTHON\\\\...x1\\\\reference'\n  - i:\\PYTHON\\catester\\examples\\ex1\\reference\n  ?                                 ^^^^^  ^^\n  + i:\\PYTHON\\catester\\examples\\ex1\\student\n  ?                                 ^^^^  ^"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 226,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x00000191808B2DA0>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x00000191808B38E0>\nconfig = {'abs_path_to_yaml': 'i:\\\\PYTHON\\\\catester\\\\examples\\\\ex1', 'testsuite': {'description': 'Checks subtests and graphics...ency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}}\ntestcases = (0, 3), json_metadata = {'absolute_tolerance': 0, 'allowed_occuranceRange': None, 'failure_message': 'Some or all tests failed', 'main_name': 'Test Basic', ...}\n\n    def test_entrypoint(self, monkeymodule, config, testcases, json_metadata):\n        idx_main, idx_sub = testcases\n        main = config[\"testsuite\"][\"properties\"][\"tests\"][idx_main]\n        sub = main[\"tests\"][idx_sub]\n        id = main[\"id\"] if main[\"id\"] is not None else str(idx_main + 1)\n    \n        ancestors = [sub, main, config[\"testsuite\"][\"properties\"]]\n        ancestors1 = [sub, main, config[\"testsuite\"]]\n    \n        relative_tolerance = get_inherited_property(\"relativeTolerance\", ancestors, 0)\n        absolute_tolerance = get_inherited_property(\"absoluteTolerance\", ancestors, 0)\n        allowed_occuranceRange = get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = get_inherited_property(\"qualification\", ancestors, None)\n        testtype = get_inherited_property(\"type\", ancestors, None)\n        failure_message = get_inherited_property(\"failureMessage\", ancestors1, None)\n        success_message = get_inherited_property(\"successMessage\", ancestors1, None)\n    \n        file = main[\"file\"]\n    \n        name = sub[\"name\"]\n        value = sub[\"value\"]\n        evalString = sub[\"evalString\"]\n        pattern = sub[\"pattern\"]\n        countRequirement = sub[\"countRequirement\"]\n        options = sub[\"options\"]\n        verificationFunction = sub[\"verificationFunction\"]\n    \n        main_name = main[\"name\"]\n    \n        #json_metadata['sub'] = sub\n        json_metadata['main_name'] = main_name\n        json_metadata['sub_name'] = name\n        json_metadata['relative_tolerance'] = relative_tolerance\n        json_metadata['absolute_tolerance'] = absolute_tolerance\n        json_metadata['allowed_occuranceRange'] = allowed_occuranceRange\n        json_metadata['qualification'] = qualification\n        json_metadata['testtype'] = testtype\n        json_metadata['failure_message'] = failure_message\n        json_metadata['success_message'] = success_message\n    \n        solution_reference = get_solution(monkeymodule, config, id, main, \"reference\")\n        solution_student = get_solution(monkeymodule, config, id, main, \"student\")\n    \n        if testtype == \"graphics\":\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\"variable\", \"graphics\", \"error\", \"warning\", \"help\"]:\n            assert name in solution_student, f\"Variable {name} not found in student namespace\"\n            val_student = solution_student[name]\n            #val_student = solution_student[eval(name, solution_student)]\n    \n            # get reference value\n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        pytest.skip()\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in solution_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = solution_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n    \n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n>                   assert val_student == val_reference, failure_msg\nE                   AssertionError: Variable var4 has incorrect value\nE                   assert 'i:\\\\PYTHON\\\\...\\ex1\\\\student' == 'i:\\\\PYTHON\\\\...x1\\\\reference'\nE                     - i:\\PYTHON\\catester\\examples\\ex1\\reference\nE                     ?                                 ^^^^^  ^^\nE                     + i:\\PYTHON\\catester\\examples\\ex1\\student\nE                     ?                                 ^^^^  ^\n\ntests\\test_class.py:226: AssertionError"
      },
      "teardown": {
        "duration": 0.0005717999883927405,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases4]",
      "lineno": 153,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases4]",
        "testcases4",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0006374999647960067,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "metadata": {
        "main_name": "Test Basic",
        "sub_name": "var5",
        "relative_tolerance": 0,
        "absolute_tolerance": 0,
        "allowed_occuranceRange": null,
        "qualification": "verifyEqual",
        "testtype": "variable",
        "failure_message": "Some or all tests failed",
        "success_message": "Congratulations! All tests passed"
      },
      "call": {
        "duration": 0.0006102999905124307,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 235,
          "message": "AssertionError: Variable var5 has incorrect value\nassert 1702463450.4957044 == 1702463448.9844906 \u00b1 0.0e+00\n  comparison failed\n  Obtained: 1702463450.4957044\n  Expected: 1702463448.9844906 \u00b1 0.0e+00"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 235,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x00000191808B2E30>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x00000191808B39D0>\nconfig = {'abs_path_to_yaml': 'i:\\\\PYTHON\\\\catester\\\\examples\\\\ex1', 'testsuite': {'description': 'Checks subtests and graphics...ency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}}\ntestcases = (0, 4), json_metadata = {'absolute_tolerance': 0, 'allowed_occuranceRange': None, 'failure_message': 'Some or all tests failed', 'main_name': 'Test Basic', ...}\n\n    def test_entrypoint(self, monkeymodule, config, testcases, json_metadata):\n        idx_main, idx_sub = testcases\n        main = config[\"testsuite\"][\"properties\"][\"tests\"][idx_main]\n        sub = main[\"tests\"][idx_sub]\n        id = main[\"id\"] if main[\"id\"] is not None else str(idx_main + 1)\n    \n        ancestors = [sub, main, config[\"testsuite\"][\"properties\"]]\n        ancestors1 = [sub, main, config[\"testsuite\"]]\n    \n        relative_tolerance = get_inherited_property(\"relativeTolerance\", ancestors, 0)\n        absolute_tolerance = get_inherited_property(\"absoluteTolerance\", ancestors, 0)\n        allowed_occuranceRange = get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = get_inherited_property(\"qualification\", ancestors, None)\n        testtype = get_inherited_property(\"type\", ancestors, None)\n        failure_message = get_inherited_property(\"failureMessage\", ancestors1, None)\n        success_message = get_inherited_property(\"successMessage\", ancestors1, None)\n    \n        file = main[\"file\"]\n    \n        name = sub[\"name\"]\n        value = sub[\"value\"]\n        evalString = sub[\"evalString\"]\n        pattern = sub[\"pattern\"]\n        countRequirement = sub[\"countRequirement\"]\n        options = sub[\"options\"]\n        verificationFunction = sub[\"verificationFunction\"]\n    \n        main_name = main[\"name\"]\n    \n        #json_metadata['sub'] = sub\n        json_metadata['main_name'] = main_name\n        json_metadata['sub_name'] = name\n        json_metadata['relative_tolerance'] = relative_tolerance\n        json_metadata['absolute_tolerance'] = absolute_tolerance\n        json_metadata['allowed_occuranceRange'] = allowed_occuranceRange\n        json_metadata['qualification'] = qualification\n        json_metadata['testtype'] = testtype\n        json_metadata['failure_message'] = failure_message\n        json_metadata['success_message'] = success_message\n    \n        solution_reference = get_solution(monkeymodule, config, id, main, \"reference\")\n        solution_student = get_solution(monkeymodule, config, id, main, \"student\")\n    \n        if testtype == \"graphics\":\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\"variable\", \"graphics\", \"error\", \"warning\", \"help\"]:\n            assert name in solution_student, f\"Variable {name} not found in student namespace\"\n            val_student = solution_student[name]\n            #val_student = solution_student[eval(name, solution_student)]\n    \n            # get reference value\n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        pytest.skip()\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in solution_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = solution_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n    \n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n>                   assert val_student == pytest.approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\nE                   AssertionError: Variable var5 has incorrect value\nE                   assert 1702463450.4957044 == 1702463448.9844906 \u00b1 0.0e+00\nE                     comparison failed\nE                     Obtained: 1702463450.4957044\nE                     Expected: 1702463448.9844906 \u00b1 0.0e+00\n\ntests\\test_class.py:235: AssertionError"
      },
      "teardown": {
        "duration": 0.0007266000029630959,
        "outcome": "passed",
        "stdout": "teardown_method\nteardown\nteardown_class\n"
      }
    }
  ],
  "_duration": 2.559027910232544,
  "_metadata": {
    "Python": "3.10.11",
    "Platform": "Windows-10-10.0.19045-SP0",
    "Packages": {
      "pytest": "7.4.3",
      "pluggy": "1.3.0"
    },
    "Plugins": {
      "json-report": "1.5.0",
      "metadata": "3.0.0"
    },
    "yamlfile": "i:\\PYTHON\\catester\\examples\\ex1\\test6.yaml"
  },
  "_timestamp": "2023-12-13 11:30:50.782644",
  "_type": "python",
  "_version": "1.0",
  "_name": "Python Test Suite",
  "_status": "COMPLETED",
  "_result": "ExitCode.TESTS_FAILED",
  "_tests": [
    {
      "name": "Test Basic",
      "variable": "var1",
      "status": "COMPLETED",
      "result": "PASSED",
      "details": "Congratulations! All tests passed"
    },
    {
      "name": "Test Basic",
      "variable": "var2",
      "status": "COMPLETED",
      "result": "PASSED",
      "details": "Congratulations! All tests passed"
    },
    {
      "name": "Test Basic",
      "variable": "var3",
      "status": "COMPLETED",
      "result": "FAILED",
      "details": "Some or all tests failed"
    },
    {
      "name": "Test Basic",
      "variable": "var4",
      "status": "COMPLETED",
      "result": "FAILED",
      "details": "Some or all tests failed"
    },
    {
      "name": "Test Basic",
      "variable": "var5",
      "status": "COMPLETED",
      "result": "FAILED",
      "details": "Some or all tests failed"
    }
  ]
}