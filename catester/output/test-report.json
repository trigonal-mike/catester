{
  "created": 1702231353.6298,
  "duration": 1.5942184925079346,
  "exitcode": 1,
  "root": "i:\\PYTHON\\catester\\catester",
  "environment": {},
  "summary": {
    "failed": 2,
    "passed": 2,
    "total": 4,
    "collected": 4
  },
  "collectors": [
    {
      "nodeid": "",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "model/__init__.py",
          "type": "Package"
        },
        {
          "nodeid": "tests/__init__.py",
          "type": "Package"
        }
      ]
    },
    {
      "nodeid": "model/__init__.py",
      "outcome": "passed",
      "result": []
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases0]",
          "type": "Function",
          "lineno": 138
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases1]",
          "type": "Function",
          "lineno": 138
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases2]",
          "type": "Function",
          "lineno": 138
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases3]",
          "type": "Function",
          "lineno": 138
        }
      ]
    },
    {
      "nodeid": "tests/test_class.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite",
          "type": "Class"
        }
      ]
    },
    {
      "nodeid": "tests/__init__.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py",
          "type": "Module"
        }
      ]
    }
  ],
  "tests": [
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases0]",
      "lineno": 138,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases0]",
        "testcases0",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.003974499995820224,
        "outcome": "passed",
        "stdout": "setup_class\nsetup_method\n"
      },
      "call": {
        "duration": 0.710759199995664,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 194,
          "message": "AssertionError: Variable figure(1).axes[0].lines[0]._linestyle has incorrect value\nassert '-.' == '--'\n  - --\n  + -."
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 194,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x00000251CCC66740>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x00000251CCC66E90>\nconfig = {'abs_path_to_yaml': 'i:\\\\PYTHON\\\\catester\\\\examples\\\\ex1', 'testsuite': {'description': 'Checks subtests and graphics...ties': {'absoluteTolerance': None, 'competency': None, 'qualification': None, 'referenceCommandList': None, ...}, ...}}\ntestcases = (0, 0)\n\n    def test_entrypoint(self, monkeymodule, config, testcases):\n        idx_main, idx_sub = testcases\n        main = config[\"testsuite\"][\"properties\"][\"tests\"][idx_main]\n        sub = main[\"tests\"][idx_sub]\n        id = main[\"id\"] if main[\"id\"] is not None else str(idx_main + 1)\n    \n        solution_student = get_solution(monkeymodule, config, id, main, \"student\")\n        solution_reference = get_solution(monkeymodule, config, id, main, \"reference\")\n    \n        ancestors = [sub, main, config[\"testsuite\"][\"properties\"]]\n    \n        relative_tolerance = get_inherited_property(\"relativeTolerance\", ancestors, 0)\n        absolute_tolerance = get_inherited_property(\"absoluteTolerance\", ancestors, 0)\n        allowed_occuranceRange = get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = get_inherited_property(\"qualification\", ancestors, None)\n        testtype = get_inherited_property(\"type\", ancestors, None)\n    \n        file = main[\"file\"]\n    \n        name = sub[\"name\"]\n        value = sub[\"value\"]\n        evalString = sub[\"evalString\"]\n        pattern = sub[\"pattern\"]\n        countRequirement = sub[\"countRequirement\"]\n        options = sub[\"options\"]\n        verificationFunction = sub[\"verificationFunction\"]\n    \n        if testtype == \"graphics\":\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\"variable\", \"graphics\", \"error\", \"warning\", \"help\"]:\n            assert name in solution_student, f\"Variable {name} not found in student namespace\"\n            val_student = solution_student[name]\n    \n            # get reference value\n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        pytest.skip()\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in solution_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = solution_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n    \n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n>                   assert val_student == val_reference, failure_msg\nE                   AssertionError: Variable figure(1).axes[0].lines[0]._linestyle has incorrect value\nE                   assert '-.' == '--'\nE                     - --\nE                     + -.\n\ntests\\test_class.py:194: AssertionError"
      },
      "teardown": {
        "duration": 0.0008028000011108816,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases1]",
      "lineno": 138,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases1]",
        "testcases1",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0005944000004092231,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "call": {
        "duration": 0.00039339999784715474,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 194,
          "message": "AssertionError: Variable figure(1).axes[0].lines[0].get_linestyle() has incorrect value\nassert '-.' == '--'\n  - --\n  + -."
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 194,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x00000251CCC66590>, monkeymodule = <_pytest.monkeypatch.MonkeyPatch object at 0x00000251CCDA4CA0>\nconfig = {'abs_path_to_yaml': 'i:\\\\PYTHON\\\\catester\\\\examples\\\\ex1', 'testsuite': {'description': 'Checks subtests and graphics...ties': {'absoluteTolerance': None, 'competency': None, 'qualification': None, 'referenceCommandList': None, ...}, ...}}\ntestcases = (0, 1)\n\n    def test_entrypoint(self, monkeymodule, config, testcases):\n        idx_main, idx_sub = testcases\n        main = config[\"testsuite\"][\"properties\"][\"tests\"][idx_main]\n        sub = main[\"tests\"][idx_sub]\n        id = main[\"id\"] if main[\"id\"] is not None else str(idx_main + 1)\n    \n        solution_student = get_solution(monkeymodule, config, id, main, \"student\")\n        solution_reference = get_solution(monkeymodule, config, id, main, \"reference\")\n    \n        ancestors = [sub, main, config[\"testsuite\"][\"properties\"]]\n    \n        relative_tolerance = get_inherited_property(\"relativeTolerance\", ancestors, 0)\n        absolute_tolerance = get_inherited_property(\"absoluteTolerance\", ancestors, 0)\n        allowed_occuranceRange = get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = get_inherited_property(\"qualification\", ancestors, None)\n        testtype = get_inherited_property(\"type\", ancestors, None)\n    \n        file = main[\"file\"]\n    \n        name = sub[\"name\"]\n        value = sub[\"value\"]\n        evalString = sub[\"evalString\"]\n        pattern = sub[\"pattern\"]\n        countRequirement = sub[\"countRequirement\"]\n        options = sub[\"options\"]\n        verificationFunction = sub[\"verificationFunction\"]\n    \n        if testtype == \"graphics\":\n            solution_student = solution_student[\"_graphics_object_\"]\n            solution_reference = solution_reference[\"_graphics_object_\"]\n    \n        if testtype in [\"variable\", \"graphics\", \"error\", \"warning\", \"help\"]:\n            assert name in solution_student, f\"Variable {name} not found in student namespace\"\n            val_student = solution_student[name]\n    \n            # get reference value\n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        pytest.skip()\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in solution_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = solution_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n    \n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n>                   assert val_student == val_reference, failure_msg\nE                   AssertionError: Variable figure(1).axes[0].lines[0].get_linestyle() has incorrect value\nE                   assert '-.' == '--'\nE                     - --\nE                     + -.\n\ntests\\test_class.py:194: AssertionError"
      },
      "teardown": {
        "duration": 0.0004174000059720129,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases2]",
      "lineno": 138,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases2]",
        "testcases2",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0005404999974416569,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "call": {
        "duration": 0.0002378999924985692,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0003836999967461452,
        "outcome": "passed",
        "stdout": "teardown_method\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases3]",
      "lineno": 138,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases3]",
        "testcases3",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0005215999990468845,
        "outcome": "passed",
        "stdout": "setup_method\n"
      },
      "call": {
        "duration": 0.0002297000028192997,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005210999952396378,
        "outcome": "passed",
        "stdout": "teardown_method\nteardown\nteardown_class\n"
      }
    }
  ]
}