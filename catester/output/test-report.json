{
  "created": 1701643826.5991948,
  "duration": 1.8657629489898682,
  "exitcode": 1,
  "root": "I:\\PYTHON\\catester",
  "environment": {},
  "summary": {
    "passed": 31,
    "failed": 12,
    "total": 43,
    "collected": 43
  },
  "collectors": [
    {
      "nodeid": "",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "catester/__init__.py",
          "type": "Package"
        },
        {
          "nodeid": "catester/tests/__init__.py",
          "type": "Package"
        }
      ]
    },
    {
      "nodeid": "catester/__init__.py",
      "outcome": "passed",
      "result": []
    },
    {
      "nodeid": "catester/tests/test_class.py::Test",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases0]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases1]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases2]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases3]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases4]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases5]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases6]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases7]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases8]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases9]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases10]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases11]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases12]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases13]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases14]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases15]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases16]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases17]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases18]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases19]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases20]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases21]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases22]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases23]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases24]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases25]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases26]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases27]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases28]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases29]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases30]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases31]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases32]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases33]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases34]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases35]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases36]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases37]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases38]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases39]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases40]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases41]",
          "type": "Function",
          "lineno": 20
        },
        {
          "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases42]",
          "type": "Function",
          "lineno": 20
        }
      ]
    },
    {
      "nodeid": "catester/tests/test_class.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "catester/tests/test_class.py::Test",
          "type": "Class"
        }
      ]
    },
    {
      "nodeid": "catester/tests/__init__.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "catester/tests/test_class.py",
          "type": "Module"
        }
      ]
    }
  ],
  "tests": [
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases0]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases0]",
        "testcases0",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.020639199996367097,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834D1E0>>\n"
      },
      "call": {
        "duration": 0.00047310000081779435,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006117999946582131,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834D1E0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases1]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases1]",
        "testcases1",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0218070999981137,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DCF0>>\n"
      },
      "call": {
        "duration": 0.00031269999453797936,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0007756000049994327,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DCF0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases2]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases2]",
        "testcases2",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.013761499998508953,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DBA0>>\n"
      },
      "call": {
        "duration": 0.0004324000037740916,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0011606999978539534,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DBA0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases3]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases3]",
        "testcases3",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.013178499997593462,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DC60>>\n"
      },
      "call": {
        "duration": 0.0005476000005728565,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 40,
          "message": "AssertionError: Variable var4 not found in student namespace\nassert 'var4' in {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...eError'>, 'BaseException': <class 'BaseException'>, ...}, 'va4': [1, 2], 'var1': 0.30000000000000004, 'var2': '1', ...}"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 40,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834DC60>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': 0.001, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...eError'>, 'BaseException': <class 'BaseException'>, ...}, 'va4': [1, 2], 'var1': 0.30000000000000004, 'var2': '1', ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute... <class 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': 0.3, 'var2': '1', 'var3': True, ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n>           assert name in namespace_student, f\"Variable {name} not found in student namespace\"\nE           AssertionError: Variable var4 not found in student namespace\nE           assert 'var4' in {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...eError'>, 'BaseException': <class 'BaseException'>, ...}, 'va4': [1, 2], 'var1': 0.30000000000000004, 'var2': '1', ...}\n\ntests\\test_class.py:40: AssertionError"
      },
      "teardown": {
        "duration": 0.0006683000028715469,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DC60>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases4]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases4]",
        "testcases4",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.013552999997045845,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DEA0>>\n"
      },
      "call": {
        "duration": 0.0004681999998865649,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 58,
          "message": "AssertionError: Variable var5 has incorrect type\nassert <class 'list'> == <class 'tuple'>"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 58,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834DEA0>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': 0.001, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...eError'>, 'BaseException': <class 'BaseException'>, ...}, 'va4': [1, 2], 'var1': 0.30000000000000004, 'var2': '1', ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute... <class 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': 0.3, 'var2': '1', 'var3': True, ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n>               assert type_student == type_reference, f\"Variable {name} has incorrect type\"\nE               AssertionError: Variable var5 has incorrect type\nE               assert <class 'list'> == <class 'tuple'>\n\ntests\\test_class.py:58: AssertionError"
      },
      "teardown": {
        "duration": 0.0006971999973757192,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DEA0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases5]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases5]",
        "testcases5",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0143134000027203,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DF30>>\n"
      },
      "call": {
        "duration": 0.000504999996337574,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 61,
          "message": "AssertionError: Variable var6 has incorrect value\nassert {1, 2, 3} == {1, 2}\n  Extra items in the left set:\n  3\n  Use -v to get more diff"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 61,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834DF30>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': 0.001, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...eError'>, 'BaseException': <class 'BaseException'>, ...}, 'va4': [1, 2], 'var1': 0.30000000000000004, 'var2': '1', ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute... <class 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': 0.3, 'var2': '1', 'var3': True, ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n>                   assert val_student == val_reference, failure_msg\nE                   AssertionError: Variable var6 has incorrect value\nE                   assert {1, 2, 3} == {1, 2}\nE                     Extra items in the left set:\nE                     3\nE                     Use -v to get more diff\n\ntests\\test_class.py:61: AssertionError"
      },
      "teardown": {
        "duration": 0.0007070000065141357,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DF30>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases6]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases6]",
        "testcases6",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.02671610000106739,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DD80>>\n"
      },
      "call": {
        "duration": 0.0003217999983462505,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0008861000023898669,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DD80>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases7]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases7]",
        "testcases7",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.025118300000031013,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DE10>>\n"
      },
      "call": {
        "duration": 0.00047869999980321154,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006218000053195283,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DE10>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases8]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases8]",
        "testcases8",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.023624699999345466,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E0E0>>\n"
      },
      "call": {
        "duration": 0.0003074999985983595,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006532000043080188,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E0E0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases9]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases9]",
        "testcases9",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.01368699999875389,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E170>>\n"
      },
      "call": {
        "duration": 0.0003265000050305389,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005753000004915521,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E170>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases10]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases10]",
        "testcases10",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.014339500005007721,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E050>>\n"
      },
      "call": {
        "duration": 0.00044999999954598024,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0009869999994407408,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E050>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases11]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases11]",
        "testcases11",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.013669200001459103,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DFC0>>\n"
      },
      "call": {
        "duration": 0.00040869999793358147,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005789000060758553,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834DFC0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases12]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases12]",
        "testcases12",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.013618299999507144,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E320>>\n"
      },
      "call": {
        "duration": 0.0004509000063990243,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006246000048122369,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E320>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases13]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases13]",
        "testcases13",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.014513200003420934,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E3B0>>\n"
      },
      "call": {
        "duration": 0.00041259999852627516,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006695000047329813,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E3B0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases14]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases14]",
        "testcases14",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.015013800002634525,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E200>>\n"
      },
      "call": {
        "duration": 0.00046579999616369605,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006240000002435409,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E200>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases15]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases15]",
        "testcases15",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.014770499998121522,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E140>>\n"
      },
      "call": {
        "duration": 0.0006050999945728108,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006563999995705672,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E140>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases16]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases16]",
        "testcases16",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.017222700000274926,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E560>>\n"
      },
      "call": {
        "duration": 0.0005285000006551854,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0011005999986082315,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E560>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases17]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases17]",
        "testcases17",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0272188000017195,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E680>>\n"
      },
      "call": {
        "duration": 0.000629400004982017,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0010588000004645437,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E680>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases18]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases18]",
        "testcases18",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.020999300002586097,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E710>>\n"
      },
      "call": {
        "duration": 0.0003513000046950765,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0007398000016110018,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E710>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases19]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases19]",
        "testcases19",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.018710800002736505,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E500>>\n"
      },
      "call": {
        "duration": 0.00038469999708468094,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005711999983759597,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E500>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases20]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases20]",
        "testcases20",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.01873590000468539,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E620>>\n"
      },
      "call": {
        "duration": 0.0006242999952519313,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0008996000033221208,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E620>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases21]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases21]",
        "testcases21",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.012964899993676227,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E860>>\n"
      },
      "call": {
        "duration": 0.00040440000157104805,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012499000004027039,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E860>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases22]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases22]",
        "testcases22",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.01338440000108676,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E8F0>>\n"
      },
      "call": {
        "duration": 0.00041480000072624534,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0013098000054014847,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E8F0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases23]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases23]",
        "testcases23",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.01396530000056373,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E7D0>>\n"
      },
      "call": {
        "duration": 0.00042470000335015357,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.000986199993349146,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E7D0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases24]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases24]",
        "testcases24",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.025526099998387508,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E890>>\n"
      },
      "call": {
        "duration": 0.00046570000267820433,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006930999952601269,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834E890>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases25]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases25]",
        "testcases25",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.023983499995665625,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EAA0>>\n"
      },
      "call": {
        "duration": 0.00053190000471659,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006769000028725713,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EAA0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases26]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases26]",
        "testcases26",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.02515529999800492,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EB30>>\n"
      },
      "call": {
        "duration": 0.0010477000032551587,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 70,
          "message": "AssertionError: Variable var_duration has incorrect value\nassert datetime.time...croseconds=10) == 5 days, 3:00:00\n  comparison failed\n  Obtained: 5 days, 3:00:00.000010\n  Expected: 5 days, 3:00:00"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 70,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834EB30>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute....py'>, 'var_date': datetime.date(2023, 12, 3), 'var_datetime': datetime.datetime(2023, 12, 3, 23, 50, 25, 909817), ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute....py'>, 'var_date': datetime.date(2023, 12, 3), 'var_datetime': datetime.datetime(2023, 12, 3, 23, 50, 25, 909817), ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n>                   assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\nE                   AssertionError: Variable var_duration has incorrect value\nE                   assert datetime.time...croseconds=10) == 5 days, 3:00:00\nE                     comparison failed\nE                     Obtained: 5 days, 3:00:00.000010\nE                     Expected: 5 days, 3:00:00\n\ntests\\test_class.py:70: AssertionError"
      },
      "teardown": {
        "duration": 0.001218099998368416,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EB30>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases27]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases27]",
        "testcases27",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.19879109999601496,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EA10>>\n"
      },
      "call": {
        "duration": 0.005044600002293009,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0007146999996621162,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EA10>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases28]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases28]",
        "testcases28",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.014378100000612903,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834ED70>>\n"
      },
      "call": {
        "duration": 0.0022672000050079077,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 68,
          "message": "AssertionError: Variable y has incorrect value"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 68,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834ED70>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': 1e-05, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...,  9.29292929,  9.39393939,  9.49494949,\n        9.5959596 ,  9.6969697 ,  9.7979798 ,  9.8989899 , 10.        ]), ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...,  9.29292929,  9.39393939,  9.49494949,\n        9.5959596 ,  9.6969697 ,  9.7979798 ,  9.8989899 , 10.        ]), ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n>                       np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n\ntests\\test_class.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (<function assert_allclose.<locals>.compare at 0x000001E5E83584C0>, array([ 1.00000000e-04,  1.00938420e-01,  2.007488...76008,  0.13146699,  0.03083368, -0.07011396,\n       -0.17034683, -0.26884313, -0.36459873, -0.45663749, -0.54402111]))\nkwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-08, atol=1e-05', 'verbose': True}\n\n    @wraps(func)\n    def inner(*args, **kwds):\n        with self._recreate_cm():\n>           return func(*args, **kwds)\nE           AssertionError: \nE           Not equal to tolerance rtol=1e-08, atol=1e-05\nE           \nE           Mismatched elements: 100 / 100 (100%)\nE           Max absolute difference: 0.0001\nE           Max relative difference: 0.00972825\nE            x: array([ 1.000000e-04,  1.009384e-01,  2.007489e-01,  2.985138e-01,\nE                   3.932366e-01,  4.839516e-01,  5.697341e-01,  6.497095e-01,\nE                   7.230626e-01,  7.890455e-01,  8.469856e-01,  8.962922e-01,...\nE            y: array([ 0.      ,  0.100838,  0.200649,  0.298414,  0.393137,  0.483852,\nE                   0.569634,  0.64961 ,  0.722963,  0.788945,  0.846886,  0.896192,\nE                   0.936363,  0.966988,  0.987755,  0.998452,  0.998971,  0.989306,...\n\nC:\\Users\\Michael\\AppData\\Local\\Programs\\Python\\Python310\\lib\\contextlib.py:79: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <catester.tests.test_class.Test object at 0x000001E5E834ED70>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': 1e-05, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...,  9.29292929,  9.39393939,  9.49494949,\n        9.5959596 ,  9.6969697 ,  9.7979798 ,  9.8989899 , 10.        ]), ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...,  9.29292929,  9.39393939,  9.49494949,\n        9.5959596 ,  9.6969697 ,  9.7979798 ,  9.8989899 , 10.        ]), ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n>                       raise AssertionError(failure_msg)\nE                       AssertionError: Variable y has incorrect value\n\ntests\\test_class.py:68: AssertionError"
      },
      "teardown": {
        "duration": 0.0007848000022931956,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834ED70>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases29]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases29]",
        "testcases29",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.025127799999609124,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EC50>>\n   Column1 Column2  Column3\n0        1       a     True\n1        2       B    False\n2        3       C     True\n<class 'pandas.core.frame.DataFrame'>\na    1\nb    2\nc    3\ndtype: int64\n<class 'pandas.core.series.Series'>\n   Column1 Column2  Column3\n0        1       A     True\n1        2       B    False\n2        3       C     True\n<class 'pandas.core.frame.DataFrame'>\na    1\nb    2\nc    3\ndtype: int64\n<class 'pandas.core.series.Series'>\n"
      },
      "call": {
        "duration": 0.011501599998155143,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 63,
          "message": "AssertionError: Variable df has incorrect value\nassert False\n +  where False = <bound method NDFrame.equals of    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True>(   Column1 Column2  Column3\\n0        1       A     True\\n1        2       B    False\\n2        3       C     True)\n +    where <bound method NDFrame.equals of    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True> =    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True.equals"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 63,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834EC50>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...:    Column1 Column2  Column3\n0        1       a     True\n1        2       B    False\n2        3       C     True, ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...:    Column1 Column2  Column3\n0        1       A     True\n1        2       B    False\n2        3       C     True, ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n>                   assert val_student.equals(val_reference), failure_msg\nE                   AssertionError: Variable df has incorrect value\nE                   assert False\nE                    +  where False = <bound method NDFrame.equals of    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True>(   Column1 Column2  Column3\\n0        1       A     True\\n1        2       B    False\\n2        3       C     True)\nE                    +    where <bound method NDFrame.equals of    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True> =    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True.equals\n\ntests\\test_class.py:63: AssertionError"
      },
      "teardown": {
        "duration": 0.0007074000022839755,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EC50>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases30]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases30]",
        "testcases30",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.023320699998294003,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834ED40>>\n   Column1 Column2  Column3\n0        1       a     True\n1        2       B    False\n2        3       C     True\n<class 'pandas.core.frame.DataFrame'>\na    1\nb    2\nc    3\ndtype: int64\n<class 'pandas.core.series.Series'>\n   Column1 Column2  Column3\n0        1       A     True\n1        2       B    False\n2        3       C     True\n<class 'pandas.core.frame.DataFrame'>\na    1\nb    2\nc    3\ndtype: int64\n<class 'pandas.core.series.Series'>\n"
      },
      "call": {
        "duration": 0.000553300000319723,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006102000043028966,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834ED40>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases31]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases31]",
        "testcases31",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.01732350000384031,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EA40>>\n"
      },
      "call": {
        "duration": 0.0002893999990192242,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005436999999801628,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EA40>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases32]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases32]",
        "testcases32",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.018369700002949685,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EEF0>>\n"
      },
      "call": {
        "duration": 0.00035010000283364207,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0007084000026225112,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EEF0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases33]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases33]",
        "testcases33",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.013003100000787526,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EE00>>\n"
      },
      "call": {
        "duration": 0.000636199998552911,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0009136999942711554,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834EE00>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases34]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases34]",
        "testcases34",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.015711400003056042,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834ECB0>>\n"
      },
      "call": {
        "duration": 0.0006024999966030009,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0010608000011416152,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834ECB0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases35]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases35]",
        "testcases35",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.028433499996026512,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F0A0>>\n"
      },
      "call": {
        "duration": 0.0006240000002435409,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012365000002318993,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F0A0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases36]",
      "lineno": 20,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases36]",
        "testcases36",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.02196679999906337,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F130>>\n"
      },
      "call": {
        "duration": 0.0005607999992207624,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0007404999996651895,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F130>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases37]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases37]",
        "testcases37",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.025674700002127793,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F010>>\n"
      },
      "call": {
        "duration": 0.0006521000032080337,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 73,
          "message": "AssertionError: Variable var2 does not match specified pattern\nassert '_x1234567890' == '-'\n  - -\n  + _x1234567890"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 73,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834F010>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n>               assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\nE               AssertionError: Variable var2 does not match specified pattern\nE               assert '_x1234567890' == '-'\nE                 - -\nE                 + _x1234567890\n\ntests\\test_class.py:73: AssertionError"
      },
      "teardown": {
        "duration": 0.0006843999944976531,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F010>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases38]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases38]",
        "testcases38",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.016907999997783918,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F0D0>>\n"
      },
      "call": {
        "duration": 0.0004206000012345612,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 75,
          "message": "AssertionError: Variable var2 does not contain specified pattern\nassert -1 > -1\n +  where -1 = <built-in method find of str object at 0x000001E5E85BD7B0>('-')\n +    where <built-in method find of str object at 0x000001E5E85BD7B0> = '_x1234567890'.find\n +      where '_x1234567890' = str('_x1234567890')"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 75,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834F0D0>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n                assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\n            elif qualification == \"contains\":\n>               assert str(val_student).find(pattern) > -1, f\"Variable {name} does not contain specified pattern\"\nE               AssertionError: Variable var2 does not contain specified pattern\nE               assert -1 > -1\nE                +  where -1 = <built-in method find of str object at 0x000001E5E85BD7B0>('-')\nE                +    where <built-in method find of str object at 0x000001E5E85BD7B0> = '_x1234567890'.find\nE                +      where '_x1234567890' = str('_x1234567890')\n\ntests\\test_class.py:75: AssertionError"
      },
      "teardown": {
        "duration": 0.0006107999943196774,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F0D0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases39]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases39]",
        "testcases39",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.01735289999487577,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F2E0>>\n"
      },
      "call": {
        "duration": 0.0005082999996375293,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 77,
          "message": "AssertionError: Variable var2 does not start with specified pattern\nassert False\n +  where False = <built-in method startswith of str object at 0x000001E5E85BD7B0>('-')\n +    where <built-in method startswith of str object at 0x000001E5E85BD7B0> = '_x1234567890'.startswith\n +      where '_x1234567890' = str('_x1234567890')"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 77,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834F2E0>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n                assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\n            elif qualification == \"contains\":\n                assert str(val_student).find(pattern) > -1, f\"Variable {name} does not contain specified pattern\"\n            elif qualification == \"startsWith\":\n>               assert str(val_student).startswith(pattern), f\"Variable {name} does not start with specified pattern\"\nE               AssertionError: Variable var2 does not start with specified pattern\nE               assert False\nE                +  where False = <built-in method startswith of str object at 0x000001E5E85BD7B0>('-')\nE                +    where <built-in method startswith of str object at 0x000001E5E85BD7B0> = '_x1234567890'.startswith\nE                +      where '_x1234567890' = str('_x1234567890')\n\ntests\\test_class.py:77: AssertionError"
      },
      "teardown": {
        "duration": 0.0007144999981392175,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F2E0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases40]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases40]",
        "testcases40",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.01907999999821186,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F370>>\n"
      },
      "call": {
        "duration": 0.0006180999989737757,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 79,
          "message": "AssertionError: Variable var2 does not end with specified pattern\nassert False\n +  where False = <built-in method endswith of str object at 0x000001E5E85BD7B0>('-')\n +    where <built-in method endswith of str object at 0x000001E5E85BD7B0> = '_x1234567890'.endswith\n +      where '_x1234567890' = str('_x1234567890')"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 79,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834F370>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n                assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\n            elif qualification == \"contains\":\n                assert str(val_student).find(pattern) > -1, f\"Variable {name} does not contain specified pattern\"\n            elif qualification == \"startsWith\":\n                assert str(val_student).startswith(pattern), f\"Variable {name} does not start with specified pattern\"\n            elif qualification == \"endsWith\":\n>               assert str(val_student).endswith(pattern), f\"Variable {name} does not end with specified pattern\"\nE               AssertionError: Variable var2 does not end with specified pattern\nE               assert False\nE                +  where False = <built-in method endswith of str object at 0x000001E5E85BD7B0>('-')\nE                +    where <built-in method endswith of str object at 0x000001E5E85BD7B0> = '_x1234567890'.endswith\nE                +      where '_x1234567890' = str('_x1234567890')\n\ntests\\test_class.py:79: AssertionError"
      },
      "teardown": {
        "duration": 0.0007449000040651299,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F370>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases41]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases41]",
        "testcases41",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.014518700001644902,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F1C0>>\n"
      },
      "call": {
        "duration": 0.0004399999961606227,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 81,
          "message": "AssertionError: Variable var2 does not contain specified pattern 1 times\nassert 0 == 1\n +  where 0 = <built-in method count of str object at 0x000001E5E85BD7B0>('-')\n +    where <built-in method count of str object at 0x000001E5E85BD7B0> = '_x1234567890'.count\n +      where '_x1234567890' = str('_x1234567890')"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 81,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834F1C0>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': 1, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n                assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\n            elif qualification == \"contains\":\n                assert str(val_student).find(pattern) > -1, f\"Variable {name} does not contain specified pattern\"\n            elif qualification == \"startsWith\":\n                assert str(val_student).startswith(pattern), f\"Variable {name} does not start with specified pattern\"\n            elif qualification == \"endsWith\":\n                assert str(val_student).endswith(pattern), f\"Variable {name} does not end with specified pattern\"\n            elif qualification == \"count\":\n>               assert str(val_student).count(pattern) == countRequirement, f\"Variable {name} does not contain specified pattern {countRequirement} times\"\nE               AssertionError: Variable var2 does not contain specified pattern 1 times\nE               assert 0 == 1\nE                +  where 0 = <built-in method count of str object at 0x000001E5E85BD7B0>('-')\nE                +    where <built-in method count of str object at 0x000001E5E85BD7B0> = '_x1234567890'.count\nE                +      where '_x1234567890' = str('_x1234567890')\n\ntests\\test_class.py:81: AssertionError"
      },
      "teardown": {
        "duration": 0.0007069999992381781,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F1C0>>\n"
      }
    },
    {
      "nodeid": "catester/tests/test_class.py::Test::test_entrypoint[testcases42]",
      "lineno": 20,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases42]",
        "testcases42",
        "Test",
        "test_class.py",
        "catester/tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0241052999990643,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F100>>\n"
      },
      "call": {
        "duration": 0.000843099995108787,
        "outcome": "failed",
        "crash": {
          "path": "I:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 85,
          "message": "AssertionError: Variable var2 does not match specified regular expression\nassert None is not None"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 85,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <catester.tests.test_class.Test object at 0x000001E5E834F100>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'allowedOccuranceRange': None, 'competency': None, 'description': None, ...}, {'absoluteTolerance': None, 'allowedOccuranceRange': None, 'countRequirement': None, 'description': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of 'evalString' not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n                assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\n            elif qualification == \"contains\":\n                assert str(val_student).find(pattern) > -1, f\"Variable {name} does not contain specified pattern\"\n            elif qualification == \"startsWith\":\n                assert str(val_student).startswith(pattern), f\"Variable {name} does not start with specified pattern\"\n            elif qualification == \"endsWith\":\n                assert str(val_student).endswith(pattern), f\"Variable {name} does not end with specified pattern\"\n            elif qualification == \"count\":\n                assert str(val_student).count(pattern) == countRequirement, f\"Variable {name} does not contain specified pattern {countRequirement} times\"\n            elif qualification == \"regexp\":\n                re_pattern = re.compile(fr'{pattern}')\n                result = re.match(re_pattern, str(val_student))\n>               assert result is not None, f\"Variable {name} does not match specified regular expression\"\nE               AssertionError: Variable var2 does not match specified regular expression\nE               assert None is not None\n\ntests\\test_class.py:85: AssertionError"
      },
      "teardown": {
        "duration": 0.000701700002537109,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method Test.test_entrypoint of <catester.tests.test_class.Test object at 0x000001E5E834F100>>\n"
      }
    }
  ]
}