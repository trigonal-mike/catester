{
  "created": 1701772965.873695,
  "duration": 0.9850001335144043,
  "exitcode": 1,
  "root": "i:\\PYTHON\\catester\\catester",
  "environment": {},
  "summary": {
    "passed": 30,
    "failed": 13,
    "total": 43,
    "collected": 43
  },
  "collectors": [
    {
      "nodeid": "",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "model/__init__.py",
          "type": "Package"
        },
        {
          "nodeid": "tests/__init__.py",
          "type": "Package"
        }
      ]
    },
    {
      "nodeid": "model/__init__.py",
      "outcome": "passed",
      "result": []
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases0]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases1]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases2]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases3]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases4]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases5]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases6]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases7]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases8]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases9]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases10]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases11]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases12]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases13]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases14]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases15]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases16]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases17]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases18]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases19]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases20]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases21]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases22]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases23]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases24]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases25]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases26]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases27]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases28]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases29]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases30]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases31]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases32]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases33]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases34]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases35]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases36]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases37]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases38]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases39]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases40]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases41]",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases42]",
          "type": "Function",
          "lineno": 23
        }
      ]
    },
    {
      "nodeid": "tests/test_class.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py::CodeabilityTestSuite",
          "type": "Class"
        }
      ]
    },
    {
      "nodeid": "tests/__init__.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_class.py",
          "type": "Module"
        }
      ]
    }
  ],
  "tests": [
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases0]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases0]",
        "testcases0",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.012536299997009337,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783DE40>>\n"
      },
      "call": {
        "duration": 0.00047729999641887844,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006891000084578991,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783DE40>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases1]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases1]",
        "testcases1",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0015561000036541373,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783E950>>\n"
      },
      "call": {
        "duration": 0.00032110000029206276,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0007231000054161996,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783E950>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases2]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases2]",
        "testcases2",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0018306999991182238,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783E800>>\n"
      },
      "call": {
        "duration": 0.0007445999945048243,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006695999763906002,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783E800>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases3]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases3]",
        "testcases3",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0013352000096347183,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783E8C0>>\n"
      },
      "call": {
        "duration": 0.00047190001350827515,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 43,
          "message": "AssertionError: Variable var4 not found in student namespace\nassert 'var4' in {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...eError'>, 'BaseException': <class 'BaseException'>, ...}, 'va4': [1, 2], 'var1': 0.30000000000000004, 'var2': '1', ...}"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 43,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783E8C0>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': 0.001, 'competency': None, 'description': None, 'entryPoint': 'Basic.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...eError'>, 'BaseException': <class 'BaseException'>, ...}, 'va4': [1, 2], 'var1': 0.30000000000000004, 'var2': '1', ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute... <class 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': 0.3, 'var2': '1', 'var3': True, ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n>           assert name in namespace_student, f\"Variable {name} not found in student namespace\"\nE           AssertionError: Variable var4 not found in student namespace\nE           assert 'var4' in {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...eError'>, 'BaseException': <class 'BaseException'>, ...}, 'va4': [1, 2], 'var1': 0.30000000000000004, 'var2': '1', ...}\n\ntests\\test_class.py:43: AssertionError"
      },
      "teardown": {
        "duration": 0.0009196999890264124,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783E8C0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases4]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases4]",
        "testcases4",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0013030999980401248,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EB00>>\n"
      },
      "call": {
        "duration": 0.000374399998690933,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 61,
          "message": "AssertionError: Variable var5 has incorrect type\nassert <class 'list'> == <class 'tuple'>"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 61,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EB00>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': 0.001, 'competency': None, 'description': None, 'entryPoint': 'Basic.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...eError'>, 'BaseException': <class 'BaseException'>, ...}, 'va4': [1, 2], 'var1': 0.30000000000000004, 'var2': '1', ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute... <class 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': 0.3, 'var2': '1', 'var3': True, ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n>               assert type_student == type_reference, f\"Variable {name} has incorrect type\"\nE               AssertionError: Variable var5 has incorrect type\nE               assert <class 'list'> == <class 'tuple'>\n\ntests\\test_class.py:61: AssertionError"
      },
      "teardown": {
        "duration": 0.0005200000014156103,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EB00>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases5]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases5]",
        "testcases5",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.001198200014187023,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EB90>>\n"
      },
      "call": {
        "duration": 0.0004005000228062272,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 64,
          "message": "AssertionError: Variable var6 has incorrect value\nassert {1, 2, 3} == {1, 2}\n  Extra items in the left set:\n  3\n  Use -v to get more diff"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 64,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EB90>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': 0.001, 'competency': None, 'description': None, 'entryPoint': 'Basic.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...eError'>, 'BaseException': <class 'BaseException'>, ...}, 'va4': [1, 2], 'var1': 0.30000000000000004, 'var2': '1', ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute... <class 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': 0.3, 'var2': '1', 'var3': True, ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n>                   assert val_student == val_reference, failure_msg\nE                   AssertionError: Variable var6 has incorrect value\nE                   assert {1, 2, 3} == {1, 2}\nE                     Extra items in the left set:\nE                     3\nE                     Use -v to get more diff\n\ntests\\test_class.py:64: AssertionError"
      },
      "teardown": {
        "duration": 0.0005016000068280846,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EB90>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases6]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases6]",
        "testcases6",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0017591000068932772,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783E9E0>>\n"
      },
      "call": {
        "duration": 0.00034359999699518085,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006130000110715628,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783E9E0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases7]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases7]",
        "testcases7",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0017817000043578446,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EA70>>\n"
      },
      "call": {
        "duration": 0.0007187000010162592,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0008341000066138804,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EA70>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases8]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases8]",
        "testcases8",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0018392000056337565,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783ED40>>\n"
      },
      "call": {
        "duration": 0.00040889999945648015,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001027100021019578,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783ED40>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases9]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases9]",
        "testcases9",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0014912999758962542,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EDD0>>\n"
      },
      "call": {
        "duration": 0.0002857999934349209,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005049000028520823,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EDD0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases10]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases10]",
        "testcases10",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.001329899998381734,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783ECB0>>\n"
      },
      "call": {
        "duration": 0.0002667000226210803,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004900000058114529,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783ECB0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases11]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases11]",
        "testcases11",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0013257999962661415,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EC20>>\n"
      },
      "call": {
        "duration": 0.0003577999887056649,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004923999949824065,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EC20>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases12]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases12]",
        "testcases12",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0013189000019337982,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EF80>>\n"
      },
      "call": {
        "duration": 0.00033729997812770307,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.000674000009894371,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EF80>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases13]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases13]",
        "testcases13",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.00272770001902245,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F010>>\n"
      },
      "call": {
        "duration": 0.00035009998828172684,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005218999867793173,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F010>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases14]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases14]",
        "testcases14",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0015294000040739775,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EE60>>\n"
      },
      "call": {
        "duration": 0.0003580999909900129,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004870999837294221,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EE60>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases15]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases15]",
        "testcases15",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.001309399987803772,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EDA0>>\n"
      },
      "call": {
        "duration": 0.00027719998615793884,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005356000037863851,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783EDA0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases16]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases16]",
        "testcases16",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0013309000059962273,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F1C0>>\n"
      },
      "call": {
        "duration": 0.00025290000485256314,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004921000218018889,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F1C0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases17]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases17]",
        "testcases17",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0013370000233408064,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F2E0>>\n"
      },
      "call": {
        "duration": 0.00025159999495372176,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004936999757774174,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F2E0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases18]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases18]",
        "testcases18",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.002070399990770966,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F370>>\n"
      },
      "call": {
        "duration": 0.00043379998533055186,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005652999971061945,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F370>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases19]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases19]",
        "testcases19",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0021973999973852187,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F160>>\n"
      },
      "call": {
        "duration": 0.0003829000052064657,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005253000126685947,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F160>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases20]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases20]",
        "testcases20",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0014072000049054623,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F280>>\n"
      },
      "call": {
        "duration": 0.00035280000884085894,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004923999949824065,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F280>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases21]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases21]",
        "testcases21",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0013448000245261937,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F4C0>>\n"
      },
      "call": {
        "duration": 0.0003262000100221485,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004989999870304018,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F4C0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases22]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases22]",
        "testcases22",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0013319000136107206,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F550>>\n"
      },
      "call": {
        "duration": 0.0004090000002179295,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004807999939657748,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F550>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases23]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases23]",
        "testcases23",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.001445000001695007,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F430>>\n"
      },
      "call": {
        "duration": 0.0005531000206246972,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006955999997444451,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F430>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases24]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases24]",
        "testcases24",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0019164000113960356,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F4F0>>\n"
      },
      "call": {
        "duration": 0.0008481999975629151,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 73,
          "message": "AssertionError: Variable var_time has incorrect value\nassert datetime.time...2, 45, 526669) == 11:42:45.527672\n  comparison failed\n  Obtained: 11:42:45.526669\n  Expected: 11:42:45.527672"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 73,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F4F0>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'competency': None, 'description': None, 'entryPoint': 'DateTime.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute....py'>, 'var_date': datetime.date(2023, 12, 5), 'var_datetime': datetime.datetime(2023, 12, 5, 11, 42, 45, 526669), ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute....py'>, 'var_date': datetime.date(2023, 12, 5), 'var_datetime': datetime.datetime(2023, 12, 5, 11, 42, 45, 527672), ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n>                   assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\nE                   AssertionError: Variable var_time has incorrect value\nE                   assert datetime.time...2, 45, 526669) == 11:42:45.527672\nE                     comparison failed\nE                     Obtained: 11:42:45.526669\nE                     Expected: 11:42:45.527672\n\ntests\\test_class.py:73: AssertionError"
      },
      "teardown": {
        "duration": 0.0005936000088695437,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F4F0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases25]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases25]",
        "testcases25",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0013040000048931688,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F700>>\n"
      },
      "call": {
        "duration": 0.0003741999971680343,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004917999904137105,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F700>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases26]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases26]",
        "testcases26",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0011984000157099217,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F790>>\n"
      },
      "call": {
        "duration": 0.0004765999910887331,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 73,
          "message": "AssertionError: Variable var_duration has incorrect value\nassert datetime.time...croseconds=10) == 5 days, 3:00:00\n  comparison failed\n  Obtained: 5 days, 3:00:00.000010\n  Expected: 5 days, 3:00:00"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 73,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F790>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'competency': None, 'description': None, 'entryPoint': 'DateTime.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute....py'>, 'var_date': datetime.date(2023, 12, 5), 'var_datetime': datetime.datetime(2023, 12, 5, 11, 42, 45, 528242), ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute....py'>, 'var_date': datetime.date(2023, 12, 5), 'var_datetime': datetime.datetime(2023, 12, 5, 11, 42, 45, 528242), ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n>                   assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\nE                   AssertionError: Variable var_duration has incorrect value\nE                   assert datetime.time...croseconds=10) == 5 days, 3:00:00\nE                     comparison failed\nE                     Obtained: 5 days, 3:00:00.000010\nE                     Expected: 5 days, 3:00:00\n\ntests\\test_class.py:73: AssertionError"
      },
      "teardown": {
        "duration": 0.0006609999982174486,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F790>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases27]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases27]",
        "testcases27",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.17725949999294244,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F670>>\n"
      },
      "call": {
        "duration": 0.006117199984146282,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0009815999947022647,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F670>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases28]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases28]",
        "testcases28",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0028814999968744814,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F9D0>>\n"
      },
      "call": {
        "duration": 0.001812600006815046,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 71,
          "message": "AssertionError: Variable y has incorrect value"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 71,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F9D0>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': 1e-05, 'competency': None, 'description': None, 'entryPoint': 'Matplot.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...,  9.29292929,  9.39393939,  9.49494949,\n        9.5959596 ,  9.6969697 ,  9.7979798 ,  9.8989899 , 10.        ]), ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...,  9.29292929,  9.39393939,  9.49494949,\n        9.5959596 ,  9.6969697 ,  9.7979798 ,  9.8989899 , 10.        ]), ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n>                       np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n\ntests\\test_class.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (<function assert_allclose.<locals>.compare at 0x0000022D67937C70>, array([ 1.00000000e-04,  1.00938420e-01,  2.007488...76008,  0.13146699,  0.03083368, -0.07011396,\n       -0.17034683, -0.26884313, -0.36459873, -0.45663749, -0.54402111]))\nkwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-08, atol=1e-05', 'verbose': True}\n\n    @wraps(func)\n    def inner(*args, **kwds):\n        with self._recreate_cm():\n>           return func(*args, **kwds)\nE           AssertionError: \nE           Not equal to tolerance rtol=1e-08, atol=1e-05\nE           \nE           Mismatched elements: 100 / 100 (100%)\nE           Max absolute difference: 0.0001\nE           Max relative difference: 0.00972825\nE            x: array([ 1.000000e-04,  1.009384e-01,  2.007489e-01,  2.985138e-01,\nE                   3.932366e-01,  4.839516e-01,  5.697341e-01,  6.497095e-01,\nE                   7.230626e-01,  7.890455e-01,  8.469856e-01,  8.962922e-01,...\nE            y: array([ 0.      ,  0.100838,  0.200649,  0.298414,  0.393137,  0.483852,\nE                   0.569634,  0.64961 ,  0.722963,  0.788945,  0.846886,  0.896192,\nE                   0.936363,  0.966988,  0.987755,  0.998452,  0.998971,  0.989306,...\n\nC:\\Users\\Michael\\AppData\\Local\\Programs\\Python\\Python310\\lib\\contextlib.py:79: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F9D0>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': 1e-05, 'competency': None, 'description': None, 'entryPoint': 'Matplot.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...,  9.29292929,  9.39393939,  9.49494949,\n        9.5959596 ,  9.6969697 ,  9.7979798 ,  9.8989899 , 10.        ]), ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...,  9.29292929,  9.39393939,  9.49494949,\n        9.5959596 ,  9.6969697 ,  9.7979798 ,  9.8989899 , 10.        ]), ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n>                       raise AssertionError(failure_msg)\nE                       AssertionError: Variable y has incorrect value\n\ntests\\test_class.py:71: AssertionError"
      },
      "teardown": {
        "duration": 0.0008470999891869724,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F9D0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases29]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases29]",
        "testcases29",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.011004999978467822,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F8B0>>\n   Column1 Column2  Column3\n0        1       a     True\n1        2       B    False\n2        3       C     True\n<class 'pandas.core.frame.DataFrame'>\na    1\nb    2\nc    3\ndtype: int64\n<class 'pandas.core.series.Series'>\n   Column1 Column2  Column3\n0        1       A     True\n1        2       B    False\n2        3       C     True\n<class 'pandas.core.frame.DataFrame'>\na    1\nb    2\nc    3\ndtype: int64\n<class 'pandas.core.series.Series'>\n"
      },
      "call": {
        "duration": 0.009905199985951185,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 66,
          "message": "AssertionError: Variable df has incorrect value\nassert False\n +  where False = <bound method NDFrame.equals of    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True>(   Column1 Column2  Column3\\n0        1       A     True\\n1        2       B    False\\n2        3       C     True)\n +    where <bound method NDFrame.equals of    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True> =    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True.equals"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 66,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F8B0>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'competency': None, 'description': None, 'entryPoint': 'Pandas.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...:    Column1 Column2  Column3\n0        1       a     True\n1        2       B    False\n2        3       C     True, ...}\nnamespace_reference = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...:    Column1 Column2  Column3\n0        1       A     True\n1        2       B    False\n2        3       C     True, ...}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n>                   assert val_student.equals(val_reference), failure_msg\nE                   AssertionError: Variable df has incorrect value\nE                   assert False\nE                    +  where False = <bound method NDFrame.equals of    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True>(   Column1 Column2  Column3\\n0        1       A     True\\n1        2       B    False\\n2        3       C     True)\nE                    +    where <bound method NDFrame.equals of    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True> =    Column1 Column2  Column3\\n0        1       a     True\\n1        2       B    False\\n2        3       C     True.equals\n\ntests\\test_class.py:66: AssertionError"
      },
      "teardown": {
        "duration": 0.0009685999830253422,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F8B0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases30]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases30]",
        "testcases30",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.009812299977056682,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F9A0>>\n   Column1 Column2  Column3\n0        1       a     True\n1        2       B    False\n2        3       C     True\n<class 'pandas.core.frame.DataFrame'>\na    1\nb    2\nc    3\ndtype: int64\n<class 'pandas.core.series.Series'>\n   Column1 Column2  Column3\n0        1       A     True\n1        2       B    False\n2        3       C     True\n<class 'pandas.core.frame.DataFrame'>\na    1\nb    2\nc    3\ndtype: int64\n<class 'pandas.core.series.Series'>\n"
      },
      "call": {
        "duration": 0.0003488000074867159,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005117999971844256,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F9A0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases31]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases31]",
        "testcases31",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0010873000137507915,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F6A0>>\n"
      },
      "call": {
        "duration": 0.0002502999850548804,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004878000181633979,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F6A0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases32]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases32]",
        "testcases32",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0011974000080954283,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FB50>>\n"
      },
      "call": {
        "duration": 0.0005411000165622681,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0011672000109683722,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FB50>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases33]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases33]",
        "testcases33",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0017149999912362546,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FA60>>\n"
      },
      "call": {
        "duration": 0.00027520000003278255,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005141000146977603,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FA60>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases34]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases34]",
        "testcases34",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0010309999925084412,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F910>>\n"
      },
      "call": {
        "duration": 0.0003108999808318913,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0006157000025268644,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F910>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases35]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases35]",
        "testcases35",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0010313999955542386,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FD00>>\n"
      },
      "call": {
        "duration": 0.00025809998624026775,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005002999969292432,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FD00>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases36]",
      "lineno": 23,
      "outcome": "passed",
      "keywords": [
        "test_entrypoint[testcases36]",
        "testcases36",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0010890000266954303,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FD90>>\n"
      },
      "call": {
        "duration": 0.00036139998701401055,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0005096999811939895,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FD90>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases37]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases37]",
        "testcases37",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0009754000057000667,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FC70>>\n"
      },
      "call": {
        "duration": 0.0005570999928750098,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 76,
          "message": "AssertionError: Variable var2 does not match specified pattern\nassert '_x1234567890' == '-'\n  - -\n  + _x1234567890"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 76,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FC70>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'competency': None, 'description': None, 'entryPoint': 'Strings.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n>               assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\nE               AssertionError: Variable var2 does not match specified pattern\nE               assert '_x1234567890' == '-'\nE                 - -\nE                 + _x1234567890\n\ntests\\test_class.py:76: AssertionError"
      },
      "teardown": {
        "duration": 0.0006799999973736703,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FC70>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases38]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases38]",
        "testcases38",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0011495999933686107,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FD30>>\n"
      },
      "call": {
        "duration": 0.00039060000563040376,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 78,
          "message": "AssertionError: Variable var2 does not contain specified pattern\nassert -1 > -1\n +  where -1 = <built-in method find of str object at 0x0000022D6B7C8170>('-')\n +    where <built-in method find of str object at 0x0000022D6B7C8170> = '_x1234567890'.find\n +      where '_x1234567890' = str('_x1234567890')"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 78,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FD30>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'competency': None, 'description': None, 'entryPoint': 'Strings.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n                assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\n            elif qualification == \"contains\":\n>               assert str(val_student).find(pattern) > -1, f\"Variable {name} does not contain specified pattern\"\nE               AssertionError: Variable var2 does not contain specified pattern\nE               assert -1 > -1\nE                +  where -1 = <built-in method find of str object at 0x0000022D6B7C8170>('-')\nE                +    where <built-in method find of str object at 0x0000022D6B7C8170> = '_x1234567890'.find\nE                +      where '_x1234567890' = str('_x1234567890')\n\ntests\\test_class.py:78: AssertionError"
      },
      "teardown": {
        "duration": 0.0005088000034447759,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FD30>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases39]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases39]",
        "testcases39",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.000987200008239597,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FF40>>\n"
      },
      "call": {
        "duration": 0.00033019998227246106,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 80,
          "message": "AssertionError: Variable var2 does not start with specified pattern\nassert False\n +  where False = <built-in method startswith of str object at 0x0000022D6B7C8170>('-')\n +    where <built-in method startswith of str object at 0x0000022D6B7C8170> = '_x1234567890'.startswith\n +      where '_x1234567890' = str('_x1234567890')"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 80,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FF40>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'competency': None, 'description': None, 'entryPoint': 'Strings.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n                assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\n            elif qualification == \"contains\":\n                assert str(val_student).find(pattern) > -1, f\"Variable {name} does not contain specified pattern\"\n            elif qualification == \"startsWith\":\n>               assert str(val_student).startswith(pattern), f\"Variable {name} does not start with specified pattern\"\nE               AssertionError: Variable var2 does not start with specified pattern\nE               assert False\nE                +  where False = <built-in method startswith of str object at 0x0000022D6B7C8170>('-')\nE                +    where <built-in method startswith of str object at 0x0000022D6B7C8170> = '_x1234567890'.startswith\nE                +      where '_x1234567890' = str('_x1234567890')\n\ntests\\test_class.py:80: AssertionError"
      },
      "teardown": {
        "duration": 0.0006639000202994794,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FF40>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases40]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases40]",
        "testcases40",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0011035999923478812,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FFD0>>\n"
      },
      "call": {
        "duration": 0.0003524000057950616,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 82,
          "message": "AssertionError: Variable var2 does not end with specified pattern\nassert False\n +  where False = <built-in method endswith of str object at 0x0000022D6B7C8170>('-')\n +    where <built-in method endswith of str object at 0x0000022D6B7C8170> = '_x1234567890'.endswith\n +      where '_x1234567890' = str('_x1234567890')"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 82,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FFD0>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'competency': None, 'description': None, 'entryPoint': 'Strings.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n                assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\n            elif qualification == \"contains\":\n                assert str(val_student).find(pattern) > -1, f\"Variable {name} does not contain specified pattern\"\n            elif qualification == \"startsWith\":\n                assert str(val_student).startswith(pattern), f\"Variable {name} does not start with specified pattern\"\n            elif qualification == \"endsWith\":\n>               assert str(val_student).endswith(pattern), f\"Variable {name} does not end with specified pattern\"\nE               AssertionError: Variable var2 does not end with specified pattern\nE               assert False\nE                +  where False = <built-in method endswith of str object at 0x0000022D6B7C8170>('-')\nE                +    where <built-in method endswith of str object at 0x0000022D6B7C8170> = '_x1234567890'.endswith\nE                +      where '_x1234567890' = str('_x1234567890')\n\ntests\\test_class.py:82: AssertionError"
      },
      "teardown": {
        "duration": 0.0005058000097051263,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FFD0>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases41]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases41]",
        "testcases41",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0009901000012177974,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FE20>>\n"
      },
      "call": {
        "duration": 0.00036639999598264694,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 84,
          "message": "AssertionError: Variable var2 does not contain specified pattern 1 times\nassert 0 == 1\n +  where 0 = <built-in method count of str object at 0x0000022D6B7C8170>('-')\n +    where <built-in method count of str object at 0x0000022D6B7C8170> = '_x1234567890'.count\n +      where '_x1234567890' = str('_x1234567890')"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 84,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FE20>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'competency': None, 'description': None, 'entryPoint': 'Strings.py', ...}, {'absoluteTolerance': None, 'countRequirement': 1, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n                assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\n            elif qualification == \"contains\":\n                assert str(val_student).find(pattern) > -1, f\"Variable {name} does not contain specified pattern\"\n            elif qualification == \"startsWith\":\n                assert str(val_student).startswith(pattern), f\"Variable {name} does not start with specified pattern\"\n            elif qualification == \"endsWith\":\n                assert str(val_student).endswith(pattern), f\"Variable {name} does not end with specified pattern\"\n            elif qualification == \"count\":\n>               assert str(val_student).count(pattern) == countRequirement, f\"Variable {name} does not contain specified pattern {countRequirement} times\"\nE               AssertionError: Variable var2 does not contain specified pattern 1 times\nE               assert 0 == 1\nE                +  where 0 = <built-in method count of str object at 0x0000022D6B7C8170>('-')\nE                +    where <built-in method count of str object at 0x0000022D6B7C8170> = '_x1234567890'.count\nE                +      where '_x1234567890' = str('_x1234567890')\n\ntests\\test_class.py:84: AssertionError"
      },
      "teardown": {
        "duration": 0.0006645000248681754,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783FE20>>\n"
      }
    },
    {
      "nodeid": "tests/test_class.py::CodeabilityTestSuite::test_entrypoint[testcases42]",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_entrypoint[testcases42]",
        "testcases42",
        "CodeabilityTestSuite",
        "test_class.py",
        "tests/__init__.py",
        "catester"
      ],
      "setup": {
        "duration": 0.0011034999915864319,
        "outcome": "passed",
        "stdout": "setup_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F730>>\n"
      },
      "call": {
        "duration": 0.0004276999970898032,
        "outcome": "failed",
        "crash": {
          "path": "i:\\PYTHON\\catester\\catester\\tests\\test_class.py",
          "lineno": 87,
          "message": "AssertionError: Variable var2 does not match specified regular expression\nassert None is not None"
        },
        "traceback": [
          {
            "path": "tests\\test_class.py",
            "lineno": 87,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F730>\ntestsuite = {'description': 'Checks variables', 'failureMessage': 'Some or all tests failed', 'name': 'Python Test suite', 'proper...tency': None, 'qualification': <QualificationEnum.verifyEqual: 'verifyEqual'>, 'referenceCommandList': None, ...}, ...}\ntestcase = ({'absoluteTolerance': None, 'competency': None, 'description': None, 'entryPoint': 'Strings.py', ...}, {'absoluteTolerance': None, 'countRequirement': None, 'description': None, 'evalString': None, ...})\nnamespace_student = {'__builtins__': {'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'Attribute...lass 'AttributeError'>, 'BaseException': <class 'BaseException'>, ...}, 'var1': '_x1234567890', 'var2': '_x1234567890'}\nnamespace_reference = {}\n\n    def test_entrypoint(self, testsuite, testcase, namespace_student, namespace_reference):\n        main, sub = testcase\n        ancestors = [sub, main, testsuite[\"properties\"]]\n    \n        relative_tolerance = self.get_inherited_property(\"relativeTolerance\", ancestors, None)\n        absolute_tolerance = self.get_inherited_property(\"absoluteTolerance\", ancestors, None)\n        allowed_occuranceRange = self.get_inherited_property(\"allowedOccuranceRange\", ancestors, None)\n        qualification = self.get_inherited_property(\"qualification\", ancestors, None)\n        testtype = self.get_inherited_property(\"type\", ancestors, None)\n    \n        if testtype == \"variable\":\n            name = sub[\"name\"]\n            value = sub[\"value\"]\n            evalString = sub[\"evalString\"]\n            pattern = sub[\"pattern\"]\n            countRequirement = sub[\"countRequirement\"]\n            options = sub[\"options\"]\n            verificationFunction = sub[\"verificationFunction\"]\n    \n            assert name in namespace_student, f\"Variable {name} not found in student namespace\"\n            val_student = namespace_student[name]\n    \n            if qualification == \"verifyEqual\":\n                if value is not None:\n                    val_reference = value\n                elif evalString is not None:\n                    try:\n                        val_reference = eval(evalString)\n                    except Exception as e:\n                        raise AssertionError(\"Evaluation of #evalString# not possible\")\n                else:\n                    assert name in namespace_reference, f\"Variable {name} not found in reference namespace\"\n                    val_reference = namespace_reference[name]\n    \n                type_student = type(val_student)\n                type_reference = type(val_reference)\n                #strict type check vs isinstance(val_student, type_reference), hmmm?\n                assert type_student == type_reference, f\"Variable {name} has incorrect type\"\n                failure_msg = f\"Variable {name} has incorrect value\"\n                if isinstance(val_student, (str, set, frozenset)):\n                    assert val_student == val_reference, failure_msg\n                elif isinstance(val_student, (DataFrame, Series)):\n                    assert val_student.equals(val_reference), failure_msg\n                elif isinstance(val_student, np.ndarray):\n                    try:\n                        np.testing.assert_allclose(val_student, val_reference, rtol=relative_tolerance, atol=absolute_tolerance)\n                    except AssertionError as e:\n                        raise AssertionError(failure_msg)\n                else:\n                    assert val_student == approx(val_reference, rel=relative_tolerance, abs=absolute_tolerance), failure_msg\n            elif qualification == \"matches\":\n                #is that ok?\n                assert str(val_student) == pattern, f\"Variable {name} does not match specified pattern\"\n            elif qualification == \"contains\":\n                assert str(val_student).find(pattern) > -1, f\"Variable {name} does not contain specified pattern\"\n            elif qualification == \"startsWith\":\n                assert str(val_student).startswith(pattern), f\"Variable {name} does not start with specified pattern\"\n            elif qualification == \"endsWith\":\n                assert str(val_student).endswith(pattern), f\"Variable {name} does not end with specified pattern\"\n            elif qualification == \"count\":\n                assert str(val_student).count(pattern) == countRequirement, f\"Variable {name} does not contain specified pattern {countRequirement} times\"\n            elif qualification == \"regexp\":\n                result = re.match(re.compile(fr\"{pattern}\"), str(val_student))\n>               assert result is not None, f\"Variable {name} does not match specified regular expression\"\nE               AssertionError: Variable var2 does not match specified regular expression\nE               assert None is not None\n\ntests\\test_class.py:87: AssertionError"
      },
      "teardown": {
        "duration": 0.0014979000261519104,
        "outcome": "passed",
        "stdout": "teardown_method\n<bound method CodeabilityTestSuite.test_entrypoint of <tests.test_class.CodeabilityTestSuite object at 0x0000022D6783F730>>\n"
      }
    }
  ]
}